<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内网穿透</title>
    <link href="/2024/10/23/inNetwork/"/>
    <url>/2024/10/23/inNetwork/</url>
    
    <content type="html"><![CDATA[<h1 id="这个可怜的前端终于学会了内网穿透"><a href="#这个可怜的前端终于学会了内网穿透" class="headerlink" title="这个可怜的前端终于学会了内网穿透"></a>这个可怜的前端终于学会了内网穿透</h1><p><a href="https://juejin.cn/user/4001878055066237/posts">九段刀客</a></p><h2 id="什么是内网穿透"><a href="#什么是内网穿透" class="headerlink" title="什么是内网穿透"></a>什么是内网穿透</h2><p><strong>内网穿透</strong>这个词大家肯定都有所耳闻，毕竟都是干这行的嘛！没吃过猪肉还能没见过猪跑啊。不就是让自己电脑启的服务，让远在千里之外的人也能访问到吗？对对对就是这个东西。</p><h2 id="什么场景下，让我需要这个东西呢"><a href="#什么场景下，让我需要这个东西呢" class="headerlink" title="什么场景下，让我需要这个东西呢"></a>什么场景下，让我需要这个东西呢</h2><p>微信支付和小程序的图片安全校验的时候。</p><p>微信支付和图片安全校验都需要给一个notify_url，处理成功后腾讯那边会调用这个接口来通知你结果和信息。</p><p>这个场景下内网穿透就非常重要了，如果你不弄内网穿透，每次都要传到测试服务器上去就会很繁琐，写一点传一次，有问题还得倒腾一次，如果能让你的本地就能实现测试服务器一样的功能，那岂不是完美。</p><p>有朋友会说服务啊，这不是后端的事情吗？这不是越来越卷了吗？</p><h2 id="依赖安装和token配置"><a href="#依赖安装和token配置" class="headerlink" title="依赖安装和token配置"></a>依赖安装和token配置</h2><p>其实很简单哈哈😄,首先拿出我们的前端秘制配方 npm</p><p><code>npm install ngrok -g</code></p><p>它似乎不想我们一步到位，还需要配置一下token，到ngrok.com 注册一个账号 <a href="https://link.juejin.cn/?target=https://ngrok.com/" title="https://ngrok.com/">ngrok官网地址</a></p><p><code>ngrok config add-authtoken xxxxxxxxxxxxxxx</code></p><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3204ca5c30e64855829632346f27bc88~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Lmd5q615YiA5a6i:q75.awebp?rk3s=f64ab15b&x-expires=1729664096&x-signature=XG7gL17AA81XdT1yt5au66QNIcI=" alt="image.png"></p><h2 id="起飞🛫"><a href="#起飞🛫" class="headerlink" title="起飞🛫"></a>起飞🛫</h2><p>先把你的nodejs服务搞起来，比如端口是3080,再运行内网穿透</p><p><code>ngrok http http://localhost:3080</code></p><h2 id="看看效果"><a href="#看看效果" class="headerlink" title="看看效果"></a>看看效果</h2><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/aee65decc61b4dbc9716b34f10c837e4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Lmd5q615YiA5a6i:q75.awebp?rk3s=f64ab15b&x-expires=1729664096&x-signature=8g90jOIZXwxqXWvEQ/VRZx/Vs1k=" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原型和原型链</title>
    <link href="/2024/07/24/jsPrototype/"/>
    <url>/2024/07/24/jsPrototype/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不要为了面试而去背题，匆匆忙忙的，不仅学不进去，背完了几天后马上会忘记。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1337beace1894b31bd868190ddb5ee75~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><p>你可能会说，“没办法，这不是为了能找份工作嘛！”。我想说的是，“那你没开始找工作的时候，咋不好好学习呢。”</p><p>好了，上述扯的这些，意思就是让大家不要做<strong>收藏家</strong>，不要把好文收藏了，就放在收藏夹里吃灰！</p><p>下面为大家简单阐述我对原型和原型链的理解，若是觉得有说的不对的地方，还望直接把页面关闭了，别在我这篇文章上继续浪费时间。（逃）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82fb1e5227de446f8ec8f2bbf39a9e26~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h2 id="四个规则"><a href="#四个规则" class="headerlink" title="四个规则"></a>四个规则</h2><p>我们先来了解下面引用类型的四个规则：</p><p>1、引用类型，都具有对象特性，即可自由扩展属性。</p><p>2、引用类型，都有一个隐式原型 <code>__proto__</code> 属性，属性值是一个普通的对象。</p><p>3、引用类型，隐式原型 <code>__proto__</code>  的属性值指向它的构造函数的显式原型 <code>prototype</code> 属性值。</p><p>4、当你试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么它会去它的隐式原型 <code>__proto__</code>（也就是它的构造函数的显式原型 <code>prototype</code>）中寻找。</p><blockquote><p>引用类型：Object、Array、Function、Date、RegExp。这里我姑且称 <strong>proto</strong> 为隐式原型，没有官方中文叫法，大家都瞎叫居多。</p></blockquote><p>下面我们逐一验证上面几个规则，就会慢慢地理解原型和原型链。</p><h4 id="规则一"><a href="#规则一" class="headerlink" title="规则一"></a>规则一</h4><p>引用类型，都具有对象特性，即可自由扩展属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-keyword">const</span> arr = []<br><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>obj.<span class="hljs-property">a</span> = <span class="hljs-number">1</span><br>arr.<span class="hljs-property">a</span> = <span class="hljs-number">1</span><br>fn.<span class="hljs-property">a</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">a</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">a</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">a</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><blockquote><p>这个规则应该比较好理解，Date 和 RegExp 也一样，就不赘述了。</p></blockquote><h4 id="规则二"><a href="#规则二" class="headerlink" title="规则二"></a>规则二</h4><p>引用类型，都有一个隐式原型 <code>__proto__</code> 属性，属性值是一个普通的对象：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-keyword">const</span> arr = []<br><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.__proto__&#x27;</span>, obj.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;arr.__proto__&#x27;</span>, arr.<span class="hljs-property">__proto__</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn.__proto__&#x27;</span>, fn.<span class="hljs-property">__proto__</span>)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8640c1029037485ca324b2cf61bdf928~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h4 id="规则三"><a href="#规则三" class="headerlink" title="规则三"></a>规则三</h4><p>引用类型，隐式原型 <code>__proto__</code> 的属性值指向它的构造函数的显式原型 <code>prototype</code> 属性值：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-keyword">const</span> arr = []<br><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>obj.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br>arr.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br>fn.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="规则四"><a href="#规则四" class="headerlink" title="规则四"></a>规则四</h4><p>当你试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么它会去它的隐式原型 <code>__proto__</code>（也就是它的构造函数的显式原型 <code>prototype</code>）中寻找：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br>obj.<span class="hljs-property">toString</span> <span class="hljs-comment">// ƒ toString() &#123; [native code] &#125;</span><br></code></pre></td></tr></table></figure><p>首先， <code>obj</code>  对象并没有 <code>toString</code>  属性，之所以能获取到 <code>toString</code>  属性，是遵循了第四条规则，从它的构造函数 <code>Object</code>  的 <code>prototype</code>  里去获取。</p><h2 id="一个特例"><a href="#一个特例" class="headerlink" title="一个特例"></a>一个特例</h2><p>我试图想推翻上面的规则，看下面这段代码：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 其实这行可以不写，默认返回 this 对象</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> nick = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;nick&quot;</span>) nick.<span class="hljs-property">toString</span> <span class="hljs-comment">// ƒ toString() &#123; [native code] &#125;</span><br></code></pre></td></tr></table></figure><p>按理说， <code>nick</code>  是 <code>Person</code>  构造函数生成的实例，而 <code>Person</code>  的 <code>prototype</code>  并没有 <code>toString</code>  方法，那么为什么， <code>nick</code>  能获取到 <code>toString</code>  方法？</p><p>这里就引出 <code>原型链</code>  的概念了， <code>nick</code>  实例先从自身出发检讨自己，发现并没有 <code>toString</code>  方法。找不到，就往上走，找 <code>Person</code>  构造函数的 <code>prototype</code>  属性，还是没找到。构造函数的 <code>prototype</code>  也是一个对象嘛，那对象的构造函数是 <code>Object</code> ，所以就找到了 <code>Object.prototype</code> 下的 <code>toString</code>  方法。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc4cc571148745f4b25545d3a7ccf73d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><blockquote><p>上述寻找的过程就形成了原型链的概念，我理解的原型链就是这样一个过程。也不知道哪个人说过一句，JavaScript 里万物皆对象。从上述情况看来，好像是这么个理。🤔</p></blockquote><h2 id="一张图片"><a href="#一张图片" class="headerlink" title="一张图片"></a>一张图片</h2><p>用图片描述原型链：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c631b657ca62427a8bdef1a2c145346a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><p>最后一个 <code>null</code>，设计上是为了避免死循环而设置的, <code>Object.prototype</code>  的隐式原型指向 <code>null</code>。</p><h2 id="一个方法"><a href="#一个方法" class="headerlink" title="一个方法"></a>一个方法</h2><p><code>instanceof</code>  运算符用于测试构造函数的 <code>prototype</code> 属性是否出现在对象原型链中的任何位置。 <code>instanceof</code>  的简易手写版，如下所示：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 变量R的原型 存在于 变量L的原型链上</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">instance_of</span>(<span class="hljs-params">L, R</span>) &#123;<br>  <span class="hljs-comment">// 验证如果为基本数据类型，就直接返回 false</span><br>  <span class="hljs-keyword">const</span> baseType = [<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;boolean&#x27;</span>, <span class="hljs-string">&#x27;undefined&#x27;</span>, <span class="hljs-string">&#x27;symbol&#x27;</span>]<br>  <span class="hljs-keyword">if</span> (baseType.<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> L)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable constant_">RP</span> = R.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// 取 R 的显示原型</span><br>  L = L.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// 取 L 的隐式原型</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (L === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 找到最顶层</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (L === <span class="hljs-variable constant_">RP</span>) &#123;<br>      <span class="hljs-comment">// 严格相等</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    L = L.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// 没找到继续向上一层原型链查找</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再来看下面这段代码：</p><p>javascript</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">name</span>) &#123;   <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; &#125; <span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-string">&#x27;nick&#x27;</span>) f <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Foo</span> <span class="hljs-comment">// true</span><br>f <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上述代码判断流程大致如下：</p><p>1、 <code>f instanceof Foo</code>： <code>f</code>  的隐式原型 <code>__proto__</code>  和 <code>Foo.prototype</code> ，是相等的，所以返回 <code>true</code> 。</p><p>2、 <code>f instanceof Object</code>： <code>f</code>  的隐式原型 <code>__proto__</code> ，和 <code>Object.prototype</code>  不等，所以继续往上走。 <code>f</code>  的隐式原型 <code>__proto__</code>  指向 <code>Foo.prototype</code> ，所以继续用 <code>Foo.prototype.__proto__</code>  去对比 <code>Object.prototype</code> ，这会儿就相等了，因为 <code>Foo.prototype</code>  就是一个普通的对象。</p><blockquote><p>再一次验证万物皆对象。。。。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过四个特性、一个例子、一张图片、一个方法，大家应该对原型和原型链的关系有了大概的认知。我的认知就是，原型链就是一个过程，原型是原型链这个过程中的一个单位，贯穿整个原型链。就好像你要是看完了不点个赞，我可以顺着网线找到你。</p><p><a href="https://juejin.cn/post/6934498361475072014">https://juejin.cn/post/6934498361475072014</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端模块化：CommonJS,AMD,CMD,ES6</title>
    <link href="/2024/07/24/jsModel/"/>
    <url>/2024/07/24/jsModel/</url>
    
    <content type="html"><![CDATA[<h1 id="前端模块化：CommonJS-AMD-CMD-ES6"><a href="#前端模块化：CommonJS-AMD-CMD-ES6" class="headerlink" title="前端模块化：CommonJS,AMD,CMD,ES6"></a>前端模块化：CommonJS,AMD,CMD,ES6</h1><p>模块化的开发方式可以提高代码复用率，方便进行代码的管理。通常一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数。目前流行的 js 模块化规范有 CommonJS、AMD、CMD 以及 ES6 的模块系统。参见阮一峰老师的文章 <a href="https://link.juejin.cn/?target=http://es6.ruanyifeng.com/%23docs/module-loader" title="http://es6.ruanyifeng.com/#docs/module-loader">module-loader</a> 。</p><h2 id="一、CommonJS"><a href="#一、CommonJS" class="headerlink" title="一、CommonJS"></a>一、CommonJS</h2><p>Node.js 是 commonJS 规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持：<code>module</code>、<code>exports</code>、<code>require</code>、<code>global</code>。实际使用时，用<code>module.exports</code>定义当前模块对外输出的接口（不推荐直接用<code>exports</code>），用<code>require</code>加载模块。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义模块math.js</span><br><span class="hljs-keyword">var</span> basicNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;   <span class="hljs-keyword">return</span> a + b; &#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <span class="hljs-comment">//在这里写上需要向外暴露的函数、变量</span><br><span class="hljs-attr">add</span>: add,   <span class="hljs-attr">basicNum</span>: basicNum<br>&#125; <span class="hljs-comment">// 引用自定义的模块时，参数包含路径，可省略.js</span><br><span class="hljs-keyword">var</span> math = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./math&#x27;</span>); math.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 引用核心模块时，不需要带路径</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>); http.<span class="hljs-title function_">createService</span>(...).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>commonJS 用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。</p><h2 id="二、AMD-和-require-js"><a href="#二、AMD-和-require-js" class="headerlink" title="二、AMD 和 require.js"></a>二、AMD 和 require.js</h2><p>AMD 规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用 require.js 实现 AMD 规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。</p><p>首先我们需要引入 require.js 文件和一个入口文件 main.js。main.js 中配置<code>require.config()</code>并规定项目中用到的基础模块。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 网页中引入require.js及main.js **/</span><br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/require.js&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">data-main</span>=<span class="hljs-string">&quot;js/main&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> <span class="hljs-comment">/** main.js 入口文件/主模块 **/</span><br><span class="hljs-comment">// 首先用config()指定各模块路径和引用名</span><br><span class="hljs-built_in">require</span>.<span class="hljs-title function_">config</span>(&#123;<br>  <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;js/lib&#x27;</span>,<br>  <span class="hljs-attr">paths</span>: &#123;<br>    <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;jquery.min&#x27;</span>, <span class="hljs-comment">//实际路径为js/lib/jquery.min.js</span><br>    <span class="hljs-attr">underscore</span>: <span class="hljs-string">&#x27;underscore.min&#x27;</span>,<br>  &#125;,<br>&#125;) <span class="hljs-comment">// 执行基本操作</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;jquery&#x27;</span>, <span class="hljs-string">&#x27;underscore&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">$, _</span>) &#123;<br>  <span class="hljs-comment">// some code here</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>引用模块的时候，我们将模块名放在<code>[]</code>中作为<code>reqiure()</code>的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在<code>[]</code>中作为<code>define()</code>的第一参数。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义math.js模块</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> basicNum = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">add</span>: add, <span class="hljs-attr">basicNum</span>: basicNum &#125;<br>&#125;) <span class="hljs-comment">// 定义一个依赖underscore.js的模块</span><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;underscore&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">_</span>) &#123;<br>  <span class="hljs-keyword">var</span> classify = <span class="hljs-keyword">function</span> (<span class="hljs-params">list</span>) &#123;<br>    _.<span class="hljs-title function_">countBy</span>(list, <span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>      <span class="hljs-keyword">return</span> num &gt; <span class="hljs-number">30</span> ? <span class="hljs-string">&#x27;old&#x27;</span> : <span class="hljs-string">&#x27;young&#x27;</span><br>    &#125;)<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">classify</span>: classify &#125;<br>&#125;) <span class="hljs-comment">// 引用模块，将模块放在[]内</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;jquery&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">$, math</span>) &#123;<br>  <span class="hljs-keyword">var</span> sum = math.<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>  $(<span class="hljs-string">&#x27;#sum&#x27;</span>).<span class="hljs-title function_">html</span>(sum)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="三、CMD-和-sea-js"><a href="#三、CMD-和-sea-js" class="headerlink" title="三、CMD 和 sea.js"></a>三、CMD 和 sea.js</h2><p>require.js 在申明依赖的模块时会在第一之间加载并执行模块内的代码：</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f</span>) &#123;<br>  <span class="hljs-comment">// 等于在最前面声明并初始化了要用到的所有模块</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-comment">// 即便没用到某个模块 b，但 b 还是提前执行了</span><br>    b.<span class="hljs-title function_">foo</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>CMD 是另一种 js 模块化方案，它与 AMD 很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。此规范其实是在 sea.js 推广过程中产生的。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** AMD写法 **/</span><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c, d, e, f</span>) &#123;       <span class="hljs-comment">// 等于在最前面声明并初始化了要用到的所有模块</span><br>a.<span class="hljs-title function_">doSomething</span>();     <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;         <span class="hljs-comment">// 即便没用到某个模块 b，但 b 还是提前执行了</span><br>b.<span class="hljs-title function_">doSomething</span>()     &#125;  &#125;); <span class="hljs-comment">/** CMD写法 **/</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;     <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>); <span class="hljs-comment">//在需要时申明</span><br>a.<span class="hljs-title function_">doSomething</span>();     <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;         <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>);         b.<span class="hljs-title function_">doSomething</span>();     &#125; &#125;);<br><span class="hljs-comment">/** sea.js **/</span><br><span class="hljs-comment">// 定义模块 math.js</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;     <span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jquery.js&#x27;</span>);     <span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;         <span class="hljs-keyword">return</span> a+b;     &#125;     <span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = add; &#125;); <span class="hljs-comment">// 加载模块</span><br>seajs.<span class="hljs-title function_">use</span>([<span class="hljs-string">&#x27;math.js&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">math</span>)&#123;     <span class="hljs-keyword">var</span> sum = math.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>); &#125;);<br></code></pre></td></tr></table></figure><h2 id="四、ES6-Module"><a href="#四、ES6-Module" class="headerlink" title="四、ES6 Module"></a>四、ES6 Module</h2><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 定义模块 math.js **/</span> <span class="hljs-keyword">var</span> basicNum = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-keyword">export</span> &#123; basicNum, add &#125;<br><span class="hljs-comment">/** 引用模块 **/</span> <span class="hljs-keyword">import</span> &#123; basicNum, add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">ele</span>) &#123;<br>  ele.<span class="hljs-property">textContent</span> = <span class="hljs-title function_">add</span>(<span class="hljs-number">99</span> + basicNum)<br>&#125;<br></code></pre></td></tr></table></figure><p>如上例所示，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名。其实 ES6 还提供了<code>export default</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。这也更趋近于 ADM 的引用写法。</p><p>代码解读</p><p>复制代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** export default **/</span> <span class="hljs-comment">//定义输出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; basicNum, add &#125; <span class="hljs-comment">//引入 import math from &#x27;./math&#x27;;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">ele</span>) &#123;<br>  ele.<span class="hljs-property">textContent</span> = math.<span class="hljs-title function_">add</span>(<span class="hljs-number">99</span> + math.<span class="hljs-property">basicNum</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>ES6 的模块不是对象，<code>import</code>命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h2 id="五、-ES6-模块与-CommonJS-模块的差异"><a href="#五、-ES6-模块与-CommonJS-模块的差异" class="headerlink" title="五、 ES6 模块与 CommonJS 模块的差异"></a>五、 ES6 模块与 CommonJS 模块的差异</h2><h3 id="1-CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。"><a href="#1-CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。" class="headerlink" title="1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。"></a>1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</h3><ul><li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul><h3 id="2-CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。"><a href="#2-CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。" class="headerlink" title="2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。"></a>2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</h3><ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul><p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><p><a href="https://juejin.cn/user/4388906146731486/posts">subwaydown</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024前端高频面试题之-- JS篇</title>
    <link href="/2024/07/24/interview/"/>
    <url>/2024/07/24/interview/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-前端高频面试题之–-JS-篇"><a href="#2024-前端高频面试题之–-JS-篇" class="headerlink" title="2024 前端高频面试题之– JS 篇"></a>2024 前端高频面试题之– JS 篇</h1><p>【前端面试复习系列文章】</p><p><a href="https://juejin.cn/post/7316349850855211046" title="https://juejin.cn/post/7316349850855211046">2024 前端高频面试题– html 篇</a></p><p><a href="https://juejin.cn/post/6844904013620592654" title="https://juejin.cn/post/6844904013620592654">2024 前端高频面试题– CSS 篇</a></p><p><a href="https://juejin.cn/post/7343484473184698405" title="https://juejin.cn/post/7343484473184698405">2024 前端高频面试题– VUE 篇</a></p><p><a href="https://juejin.cn/post/7349971654590857216" title="https://juejin.cn/post/7349971654590857216">2024 前端高频面试题– react 篇</a></p><p><a href="https://juejin.cn/post/7350535815132659749" title="https://juejin.cn/post/7350535815132659749">2024 前端高频面试题– 前端工程化篇</a></p><p><a href="https://juejin.cn/post/7351301328206331939" title="https://juejin.cn/post/7351301328206331939">2024 前端高频面试题– HTTP 和浏览器篇</a></p><p><a href="https://juejin.cn/post/7353456468094599205" title="https://juejin.cn/post/7353456468094599205">2024 前端高频面试题– 手写代码篇</a></p><p><a href="https://juejin.cn/post/7356060104565997605" title="https://juejin.cn/post/7356060104565997605">2024 前端高频面试题– 数据结构与算法篇</a></p><p>【导读】最近在面试，把一些前端高频面试题或知识点做一个总结，一方面自己做一个梳理和总结，另外一方面也分享给正在面试或有需要的朋友。</p><p>下图为思维导图：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/831963d7ed524c3796b1889037da72f9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1260&h=4032&s=669131&e=jpg&b=313131" alt="JS.jpg"></p><h3 id="1-js-基本数据类型有哪些及它们的区别"><a href="#1-js-基本数据类型有哪些及它们的区别" class="headerlink" title="1.js 基本数据类型有哪些及它们的区别"></a>1.js 基本数据类型有哪些及它们的区别</h3><p>JavaScript 共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p><p>其中 Symbol 和 BigInt 是 ES6 中新增的数据类型：</p><ul><li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><p>这些数据可以分为原始数据类型和引用数据类型：</p><ul><li>栈：原始数据类型（Undefined、Null、Boolean、Number、String、Symbol、BigInt）</li><li>堆：引用数据类型（对象、数组和函数）</li></ul><p>两种类型的区别在于<strong>存储位置的不同：</strong></p><ul><li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li><li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li></ul><p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p><ul><li>在数据结构中，栈中数据的存取方式为先进后出。</li><li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li></ul><p>在操作系统中，内存被分为栈区和堆区：</p><ul><li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li></ul><h3 id="2-数据类型检测的方式有哪些"><a href="#2-数据类型检测的方式有哪些" class="headerlink" title="2. 数据类型检测的方式有哪些"></a>2. 数据类型检测的方式有哪些</h3><p><strong>（1）typeof</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">2</span>) <span class="hljs-comment">// number</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">// boolean</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;str&#x27;</span>) <span class="hljs-comment">// string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> []) <span class="hljs-comment">// object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;) <span class="hljs-comment">// function</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> &#123;&#125;) <span class="hljs-comment">// object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">// object`</span><br></code></pre></td></tr></table></figure><p>其中数组、对象、null 都会被判断为 object，其他判断都正确。</p><p><strong>（2）instanceof</strong></p><p><code>instanceof</code>可以正确判断对象的类型，<strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Number</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Boolean</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>可以看到，<code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。<code>instanceof</code> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p><p><strong>（3） constructor</strong></p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-number">2</span>).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Number</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Boolean</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;str&#x27;</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">String</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Fn</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>（4）Object.prototype.toString.call()</strong></p><p><code>Object.prototype.toString.call()</code> 使用 Object 对象的原型方法 toString 来判断数据类型：</p><p>vbscript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-number">2</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;str&#x27;</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>([]))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(&#123;&#125;))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>))<br></code></pre></td></tr></table></figure><p>同样是检测对象 obj 调用 toString 方法，obj.toString()的结果和 Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p><p>这是因为 toString 是 Object 的原型方法，而 Array、function 等<strong>类型作为 Object 的实例，都重写了 toString 方法</strong>。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString()不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p><h3 id="3-判断数组的方式有哪些"><a href="#3-判断数组的方式有哪些" class="headerlink" title="3. 判断数组的方式有哪些"></a>3. 判断数组的方式有哪些</h3><ul><li>通过 Object.prototype.toString.call()做判断</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj).<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;Array&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>通过原型链做判断</li></ul><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><ul><li>通过 ES6 的 Array.isArray()做判断</li></ul><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArrray</span>(obj)<br></code></pre></td></tr></table></figure><ul><li>通过 instanceof 做判断</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span><br></code></pre></td></tr></table></figure><ul><li>通过 Array.prototype.isPrototypeOf</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(obj)<br></code></pre></td></tr></table></figure><h3 id="4-请简述-JavaScript-中的-this"><a href="#4-请简述-JavaScript-中的-this" class="headerlink" title="4.请简述 JavaScript 中的 this"></a>4.请简述 JavaScript 中的 this</h3><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p><ul><li>第一种是<strong>函数调用模式</strong>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li><li>第二种是<strong>方法调用模式</strong>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li><li>第三种是<strong>构造器调用模式</strong>，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li><li>第四种是 <strong>apply 、 call 和 bind 调用模式</strong>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</li></ul><p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p><p>3.箭头函数与普通函数有什么区别</p><p><strong>（1）箭头函数比普通函数更加简洁</strong></p><ul><li>如果没有参数，就直接写一个空括号即可</li><li>如果只有一个参数，可以省去参数的括号</li><li>如果有多个参数，用逗号分割</li><li>如果函数体的返回值只有一句，可以省略大括号</li><li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个 void 关键字。最常见的就是调用一个函数：</li></ul><p>csharp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">doesNotReturn</span>()<br></code></pre></td></tr></table></figure><p><strong>（2）箭头函数没有自己的 this</strong></p><p>箭头函数不会创建自己的 this， 所以它没有自己的 this，它只会在自己作用域的上一层继承 this。所以箭头函数中 this 的指向在它在定义时已经确定了，之后不会改变。</p><p><strong>（3）箭头函数继承来的 this 指向永远不会改变</strong></p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;GLOBAL&#x27;</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;OBJ&#x27;</span>,<br>  <span class="hljs-attr">a</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>  &#125;,<br>  <span class="hljs-attr">b</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>  &#125;,<br>&#125;<br>obj.<span class="hljs-title function_">a</span>() <span class="hljs-comment">// &#x27;OBJ&#x27; obj.b();    // &#x27;GLOBAL&#x27; new obj.a()  // undefined new obj.b()  // Uncaught TypeError: obj.b is not a constructor</span><br></code></pre></td></tr></table></figure><p>对象 obj 的方法 b 是使用箭头函数定义的，这个函数中的 this 就永远指向它定义时所处的全局执行环境中的 this，即便这个函数是作为对象 obj 的方法调用，this 依旧指向 Window 对象。需要注意，定义对象的大括号<code>&#123;&#125;</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p><p><strong>（4）call()、apply()、bind()等方法不能改变箭头函数中 this 的指向</strong></p><p>bash</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;Global&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>&#125;<br><span class="hljs-title function_">fun1</span>() <span class="hljs-comment">// &#x27;Global&#x27; fun1.call(&#123;id: &#x27;Obj&#x27;&#125;);     // &#x27;Global&#x27; fun1.apply(&#123;id: &#x27;Obj&#x27;&#125;);    // &#x27;Global&#x27; fun1.bind(&#123;id: &#x27;Obj&#x27;&#125;)();   // &#x27;Global&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>（5）箭头函数不能作为构造函数使用</strong></p><p>构造函数在 new 的步骤在上面已经说过了，实际上第二步就是将函数中的 this 指向该对象。 但是由于箭头函数时没有自己的 this 的，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p><p><strong>（6）箭头函数没有自己的 arguments</strong></p><p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是它外层函数的 arguments 值。</p><p><strong>（7）箭头函数没有 prototype</strong></p><p><strong>（8）箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</strong></p><h3 id="5-AMD-和-CommonJS-的区别"><a href="#5-AMD-和-CommonJS-的区别" class="headerlink" title="5.AMD 和 CommonJS 的区别"></a>5.AMD 和 CommonJS 的区别</h3><p>它们都是实现模块体系的方式，直到 <code>ES2015</code> 出现之前，<code>JavaScript</code> 一直没有模块体系。<code>CommonJS</code> 是同步的，而 <code>AMD（Asynchronous Module Definition）</code> 从全称中可以明显看出是异步的。<code>CommonJS</code> 的设计是为服务器端开发考虑的，而 <code>AMD</code> 支持异步加载模块，更适合浏览器。</p><p>我发现 <code>AMD</code> 的语法非常冗长，<code>CommonJS</code> 更接近其他语言 <code>import</code> 声明语句的用法习惯。大多数情况下，我认为 <code>AMD</code> 没有使用的必要，因为如果把所有 <code>JavaScript</code> 都捆绑进一个文件中，将无法得到异步加载的好处。此外，<code>CommonJS</code> 语法上更接近 <code>Node</code> 编写模块的风格，在前后端都使用 <code>JavaScript</code> 开发之间进行切换时，语境的切换开销较小。</p><p>我很高兴看到 <code>ES2015</code> 的模块加载方案同时支持同步和异步，我们终于可以只使用一种方案了。虽然它尚未在浏览器和 <code>Node</code> 中完全推出，但是我们可以使用代码转换工具进行转换。</p><h3 id="6-ES6模块与CommonJS模块有什么异同？"><a href="#6-ES6模块与CommonJS模块有什么异同？" class="headerlink" title="6.ES6模块与CommonJS模块有什么异同？"></a>6.<strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</h3><p>ES6 Module 和 CommonJS 模块的区别：</p><ul><li>CommonJS 是对模块的浅拷⻉，ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，也就是指针指向不能变，类似 const；</li><li>import 的接⼝是 read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错。</li></ul><p>ES6 Module 和 CommonJS 模块的共同点：</p><ul><li>CommonJS 和 ES6 Module 都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li></ul><h3 id="7-let、const、var-的区别"><a href="#7-let、const、var-的区别" class="headerlink" title="7. let、const、var 的区别"></a>7. let、const、var 的区别</h3><p><strong>（1）块级作用域：</strong> 块作用域由 <code>&#123; &#125;</code>包括，let 和 const 具有块级作用域，var 不存在块级作用域。块级作用域解决了 ES5 中的两个问题：</p><ul><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量</li></ul><p><strong>（2）变量提升：</strong> var 存在变量提升，let 和 const 不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><p><strong>（3）给全局添加属性：</strong> 浏览器的全局对象是 window，Node 的全局对象是 global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是 let 和 const 不会。</p><p><strong>（4）重复声明：</strong> var 声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const 和 let 不允许重复声明变量。</p><p><strong>（5）暂时性死区：</strong> 在使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上，称为<strong>暂时性死区</strong>。使用 var 声明的变量不存在暂时性死区。</p><p><strong>（6）初始值设置：</strong> 在变量声明时，var 和 let 可以不用设置初始值。而 const 声明变量必须设置初始值。</p><p><strong>（7）指针指向：</strong> let 和 const 都是 ES6 新增的用于创建变量的语法。 let 创建的变量是可以更改指针指向（可以重新赋值）。但 const 声明的变量是不允许改变指针的指向。</p><table><thead><tr><th><strong>区别</strong></th><th><strong>var</strong></th><th><strong>let</strong></th><th><strong>const</strong></th></tr></thead><tbody><tr><td>是否有块级作用域</td><td>×</td><td>✔️</td><td>✔️</td></tr><tr><td>是否存在变量提升</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>是否添加全局属性</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>能否重复声明变量</td><td>✔️</td><td>×</td><td>×</td></tr><tr><td>是否存在暂时性死区</td><td>×</td><td>✔️</td><td>✔️</td></tr><tr><td>是否必须设置初始值</td><td>×</td><td>×</td><td>✔️</td></tr><tr><td>能否改变指针指向</td><td>✔️</td><td>✔️</td><td>×</td></tr></tbody></table><h3 id="8-new-操作符的实现原理"><a href="#8-new-操作符的实现原理" class="headerlink" title="8.new 操作符的实现原理"></a>8.new 操作符的实现原理</h3><p><strong>new 操作符的执行过程：</strong></p><p>（1）首先创建了一个新的空对象</p><p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p><p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p><p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p><p>具体实现：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">objectFactory</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-keyword">let</span> newObject = <span class="hljs-literal">null</span>;   <span class="hljs-keyword">let</span> constructor = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);   <span class="hljs-keyword">let</span> result = <span class="hljs-literal">null</span>;   <span class="hljs-comment">// 判断参数是否是一个函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> constructor !== <span class="hljs-string">&quot;function&quot;</span>) &#123;     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;type error&quot;</span>);     <span class="hljs-keyword">return</span>;   &#125;   <span class="hljs-comment">// 新建一个空对象，对象的原型为构造函数的 prototype 对象   </span><br> newObject = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);   <span class="hljs-comment">// 将 this 指向新建对象，并执行函数   </span><br> result = constructor.<span class="hljs-title function_">apply</span>(newObject, <span class="hljs-variable language_">arguments</span>);   <span class="hljs-comment">// 判断返回对象   </span><br> <span class="hljs-keyword">let</span> flag = result &amp;&amp; (<span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&quot;function&quot;</span>);   <span class="hljs-comment">// 判断返回结果   </span><br> <span class="hljs-keyword">return</span> flag ? result : newObject;<br> &#125; <span class="hljs-comment">// 使用方法</span><br> <span class="hljs-title function_">objectFactory</span>(构造函数, 初始化参数);<br></code></pre></td></tr></table></figure><h3 id="9-数组有哪些原生方法？"><a href="#9-数组有哪些原生方法？" class="headerlink" title="9.数组有哪些原生方法？"></a>9.数组有哪些原生方法？</h3><p>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</p><p>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</p><p>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</p><p>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</p><p>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</p><p>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</p><p>数组归并方法 reduce() 和 reduceRight() 方法</p><h3 id="10-for-in-和-for-of-的区别"><a href="#10-for-in-和-for-of-的区别" class="headerlink" title="10.for in 和 for of 的区别"></a>10.for in 和 for of 的区别</h3><p>for…of 是 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，和 ES3 中的 for…in 的区别如下</p><ul><li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li><li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li><li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li></ul><p><strong>总结：</strong> for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p><h3 id="11-数组的遍历方法有哪些？"><a href="#11-数组的遍历方法有哪些？" class="headerlink" title="11.数组的遍历方法有哪些？"></a>11.数组的遍历方法有哪些？</h3><table><thead><tr><th><strong>方法</strong></th><th><strong>是否改变原数组</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>forEach()</td><td>否</td><td>数组方法，值是基本类型, 改变不了;如果是引用类型分两种情况：1、没有修改形参元素的地址值, 只是修改形参元素内部的某些属性，会改变原数组；2、直接修改整个元素对象时，无法改变原数组，没有返回值</td></tr><tr><td>map()</td><td>否</td><td>数组方法，不改变原数组，有返回值，可链式调用</td></tr><tr><td>filter()</td><td>否</td><td>数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</td></tr><tr><td>for…of</td><td>否</td><td>for…of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环</td></tr><tr><td>every() 和 some()</td><td>否</td><td>数组方法，some()只要有一个是 true，便返回 true；而 every()只要有一个是 false，便返回 false.</td></tr><tr><td>find() 和 findIndex()</td><td>否</td><td>数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td></tr><tr><td>reduce() 和 reduceRight()</td><td>否</td><td>数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</td></tr></tbody></table><h3 id="12-forEach-和-map-的区别"><a href="#12-forEach-和-map-的区别" class="headerlink" title="12.forEach 和 map 的区别"></a>12.forEach 和 map 的区别</h3><p>这方法都是用来遍历数组的，两者区别如下：</p><ul><li>forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li><li>map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li></ul><h3 id="13-原型和原型链"><a href="#13-原型和原型链" class="headerlink" title="13.原型和原型链"></a>13.原型和原型链</h3><h4 id="1-对原型、原型链的理解"><a href="#1-对原型、原型链的理解" class="headerlink" title="1. 对原型、原型链的理解"></a>1. 对原型、原型链的理解</h4><p>在 JavaScript 中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。</p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p><p><strong>特点：</strong> JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p><h4 id="2-原型修改、重写"><a href="#2-原型修改、重写" class="headerlink" title="2. 原型修改、重写"></a>2. 原型修改、重写</h4><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name &#125; <span class="hljs-comment">// 修改原型</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === p.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 重写原型</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;     <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125; &#125; <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)        <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === p.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可以看到修改原型的时候 p 的构造函数不是指向 Person 了，因为直接给 Person 的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数 Object，所以这时候<code>p.constructor === Object</code> ，而不是<code>p.constructor === Person</code>。要想成立，就要用 constructor 指回来：</p><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;     <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125; &#125; <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) p.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Person</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)        <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">__proto__</span> === p.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="3-原型链指向"><a href="#3-原型链指向" class="headerlink" title="3. 原型链指向"></a>3. 原型链指向</h4><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// Person.prototype</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// Object.prototype</span><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> <span class="hljs-comment">//Object.prototype</span><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// Object.prototype</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// Object.prototype</span><br>p1.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> <span class="hljs-comment">// Person</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> <span class="hljs-comment">// Person</span><br></code></pre></td></tr></table></figure><h4 id="4-原型链的终点是什么？如何打印出原型链的终点？"><a href="#4-原型链的终点是什么？如何打印出原型链的终点？" class="headerlink" title="4. 原型链的终点是什么？如何打印出原型链的终点？"></a>4. 原型链的终点是什么？如何打印出原型链的终点？</h4><p>由于<code>Object</code>是构造函数，原型链终点是<code>Object.prototype.__proto__</code>，而<code>Object.prototype.__proto__=== null // true</code>，所以，原型链的终点是<code>null</code>。原型链上的所有原型都是对象，所有的对象最终都是由<code>Object</code>构造的，而<code>Object.prototype</code>的下一级是<code>Object.prototype.__proto__</code>。</p><h4 id="5-如何获得对象非原型链上的属性？"><a href="#5-如何获得对象非原型链上的属性？" class="headerlink" title="5. 如何获得对象非原型链上的属性？"></a>5. 如何获得对象非原型链上的属性？</h4><p>使用后<code>hasOwnProperty()</code>方法来判断属性是否属于原型链的属性：</p><p>scss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">iterate</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">var</span> res = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) res.<span class="hljs-title function_">push</span>(key + <span class="hljs-string">&#x27;: &#x27;</span> + obj[key])<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-对执行上下文-作用域-链-闭包的理解"><a href="#14-对执行上下文-作用域-链-闭包的理解" class="headerlink" title="14. 对执行上下文,作用域(链),闭包的理解"></a>14. 对执行上下文,作用域(链),闭包的理解</h3><h4 id="1-对闭包的理解"><a href="#1-对闭包的理解" class="headerlink" title="1. 对闭包的理解"></a>1. 对闭包的理解</h4><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p>闭包有两个常用的用途；</p><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul><p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>   <span class="hljs-variable language_">window</span>.<span class="hljs-property">B</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)   &#125; &#125; <span class="hljs-title function_">A</span>() <span class="hljs-title function_">B</span>() <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p><p>css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;, i * <span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。解决办法有三种：</p><ul><li>第一种是使用闭包的方式</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  ;(<span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>    &#125;, j * <span class="hljs-number">1000</span>)<br>  &#125;)(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p><ul><li>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</li></ul><p>css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">j</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>    &#125;,<br>    i * <span class="hljs-number">1000</span>,<br>    i<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</li></ul><p>css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;, i * <span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-对作用域、作用域链的理解"><a href="#2-对作用域、作用域链的理解" class="headerlink" title="2. 对作用域、作用域链的理解"></a>2. 对作用域、作用域链的理解</h4><h5 id="1）全局作用域和函数作用域"><a href="#1）全局作用域和函数作用域" class="headerlink" title="1）全局作用域和函数作用域"></a>1）全局作用域和函数作用域</h5><p>（1）全局作用域</p><ul><li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li><li>所有未定义直接赋值的变量自动声明为全局作用域</li><li>所有 window 对象的属性拥有全局作用域</li><li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li></ul><p>（2）函数作用域</p><ul><li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li><li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li></ul><h5 id="2）块级作用域"><a href="#2）块级作用域" class="headerlink" title="2）块级作用域"></a>2）块级作用域</h5><ul><li>使用 ES6 中新增的 let 和 const 指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由<code>&#123; &#125;</code>包裹的代码片段）</li><li>let 和 const 声明的变量不会有变量提升，也不可以重复声明</li><li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li></ul><p><strong>作用域链：</strong> 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到 window 对象就被终止，这一层层的关系就是作用域链。</p><p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p><p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p><p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p><h4 id="3-对执行上下文的理解"><a href="#3-对执行上下文的理解" class="headerlink" title="3. 对执行上下文的理解"></a>3. 对执行上下文的理解</h4><h5 id="1-执行上下文类型"><a href="#1-执行上下文类型" class="headerlink" title="1. 执行上下文类型"></a>1. 执行上下文类型</h5><p><strong>（1）全局执行上下文</strong></p><p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并且设置 this 的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p><p><strong>（2）函数执行上下文</strong></p><p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p><p><strong>（3）</strong> <code>eval</code><strong>函数执行上下文</strong></p><p>执行在 eval 函数中的代码会有属于他自己的执行上下文，不过 eval 函数不常使用，不做介绍。</p><h5 id="2-执行上下文栈"><a href="#2-执行上下文栈" class="headerlink" title="2. 执行上下文栈"></a>2. 执行上下文栈</h5><ul><li>JavaScript 引擎使用执行上下文栈来管理执行上下文</li><li>当 JavaScript 执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li></ul><p>sql</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">first</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Inside first function&#x27;</span>)<br>  <span class="hljs-title function_">second</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Again inside first function&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">second</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Inside second function&#x27;</span>)<br>&#125;<br><span class="hljs-title function_">first</span>() <span class="hljs-comment">//执行顺序 //先执行second(),在执行first()</span><br></code></pre></td></tr></table></figure><h5 id="3-创建执行上下文"><a href="#3-创建执行上下文" class="headerlink" title="3. 创建执行上下文"></a>3. 创建执行上下文</h5><p>创建执行上下文有两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong></p><p><strong>1）创建阶段</strong></p><p>（1）this 绑定</p><ul><li>在全局执行上下文中，this 指向全局对象（window 对象）</li><li>在函数执行上下文中，this 指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li></ul><p>（2）创建词法环境组件</p><ul><li>词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量&#x2F;函数名，变量是对实际对象或原始数据的引用。</li><li>词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li></ul><p>（3）创建变量环境组件</p><ul><li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li></ul><p><strong>2）执行阶段</strong> 此阶段会完成对变量的分配，最后执行完代码。</p><p><strong>简单来说执行上下文就是指：</strong></p><p>在执行一点 JS 代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p><p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p><ul><li>全局上下文：变量定义，函数声明</li><li>函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li></ul><h3 id="15-实现-call、apply-及-bind-函数"><a href="#15-实现-call、apply-及-bind-函数" class="headerlink" title="15. 实现 call、apply 及 bind 函数"></a>15. 实现 call、apply 及 bind 函数</h3><p><strong>（1）call 函数的实现步骤：</strong></p><ul><li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li><li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li><li>处理传入的参数，截取第一个参数后的所有参数。</li><li>将函数作为上下文对象的一个属性。</li><li>使用上下文对象来调用这个方法，并保存返回结果。</li><li>删除刚才新增的属性。</li><li>返回结果。</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">// 判断调用对象</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;type error&#x27;</span>)<br>  &#125; <span class="hljs-comment">// 获取参数</span><br>  <span class="hljs-keyword">let</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>),<br>    result = <span class="hljs-literal">null</span> <span class="hljs-comment">// 判断 context 是否传入，如果未传入则设置为 window</span><br>  context = context || <span class="hljs-variable language_">window</span> <span class="hljs-comment">// 将调用函数设为对象的方法</span><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 调用函数</span><br>  result = context.<span class="hljs-title function_">fn</span>(...args) <span class="hljs-comment">// 将属性删除</span><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）apply 函数的实现步骤：</strong></p><ul><li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li><li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li><li>将函数作为上下文对象的一个属性。</li><li>判断参数值是否传入</li><li>使用上下文对象来调用这个方法，并保存返回结果。</li><li>删除刚才新增的属性</li><li>返回结果</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">// 判断调用对象是否为函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">null</span> <span class="hljs-comment">// 判断 context 是否存在，如果未传入则为 window</span><br>  context = context || <span class="hljs-variable language_">window</span> <span class="hljs-comment">// 将函数设为对象的方法</span><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 调用方法</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]) &#123;<br>    result = context.<span class="hljs-title function_">fn</span>(...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>])<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    result = context.<span class="hljs-title function_">fn</span>()<br>  &#125; <span class="hljs-comment">// 将属性删除</span><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）bind 函数的实现步骤：</strong></p><ul><li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li><li>保存当前函数的引用，获取其余传入参数值。</li><li>创建一个函数返回</li><li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li></ul><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">// 判断调用对象是否为函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>  &#125; <span class="hljs-comment">// 获取参数</span><br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>),<br>    fn = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 根据调用方式，传入不同绑定值</span><br>    <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<br>      <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Fn</span> ? <span class="hljs-variable language_">this</span> : context,<br>      args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>)<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-call、apply-函数的区别"><a href="#16-call、apply-函数的区别" class="headerlink" title="16. call、apply 函数的区别"></a>16. call、apply 函数的区别</h3><p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p><ul><li>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</li><li>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</li></ul><h3 id="17-异步编程的实现方式？"><a href="#17-异步编程的实现方式？" class="headerlink" title="17. 异步编程的实现方式？"></a>17. 异步编程的实现方式？</h3><p>markdown</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JavaScript</span>中的异步机制可以分为以下几种：<br> -   **回调函数** 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。<br> -   **<span class="hljs-title class_">Promise</span>** 的方式，使用 <span class="hljs-title class_">Promise</span> 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。<br> -   **generator** 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。 -   **<span class="hljs-keyword">async</span> 函数** 的方式，<span class="hljs-keyword">async</span> 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 <span class="hljs-keyword">await</span> 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。<br></code></pre></td></tr></table></figure><h3 id="18-setTimeout、Promise、Async-x2F-Await-的区别"><a href="#18-setTimeout、Promise、Async-x2F-Await-的区别" class="headerlink" title="18. setTimeout、Promise、Async&#x2F;Await 的区别"></a>18. setTimeout、Promise、Async&#x2F;Await 的区别</h3><h4 id="（1）setTimeout"><a href="#（1）setTimeout" class="headerlink" title="（1）setTimeout"></a>（1）setTimeout</h4><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>) <span class="hljs-comment">//1. 打印 script start</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;settimeout&#x27;</span>) <span class="hljs-comment">// 4. 打印 settimeout</span><br>&#125;) <span class="hljs-comment">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>) <span class="hljs-comment">//3. 打印 script start</span><br><span class="hljs-comment">// 输出顺序：script start-&gt;script end-&gt;settimeout</span><br></code></pre></td></tr></table></figure><h4 id="（2）Promise"><a href="#（2）Promise" class="headerlink" title="（2）Promise"></a>（2）Promise</h4><p>Promise 本身是<strong>同步的立即执行函数</strong>， 当在 executor 中执行 resolve 或者 reject 的时候, 此时是异步操作， 会先执行 then&#x2F;catch 等，当主栈完成后，才会去调用 resolve&#x2F;reject 中存放的方法执行，打印 p 的时候，是打印的返回结果，一个 Promise 实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><span class="hljs-keyword">let</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1 end&#x27;</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;settimeout&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><span class="hljs-comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout</span><br></code></pre></td></tr></table></figure><p>当 JS 主线程执行到 Promise 对象时：</p><ul><li>promise1.then() 的回调就是一个 task</li><li>promise1 是 resolved 或 rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</li><li>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中</li><li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li></ul><h4 id="（3）async-x2F-await"><a href="#（3）async-x2F-await" class="headerlink" title="（3）async&#x2F;await"></a>（3）async&#x2F;await</h4><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 start&#x27;</span>)<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">async2</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async2&#x27;</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><span class="hljs-title function_">async1</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><span class="hljs-comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span><br></code></pre></td></tr></table></figure><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><p>例如：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">func1</span>())<br></code></pre></td></tr></table></figure><p>func1 的运行结果其实就是一个 Promise 对象。因此也可以使用 then 来处理后续逻辑。</p><p>scss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">func1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 30</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>await 的含义为等待，也就是 async 函数需要等待 await 后的函数执行完成并且有了返回结果（Promise 对象）之后，才能继续执行下面的代码。await 通过返回一个 Promise 对象来实现同步的效果。</p><h3 id="19-Promise-all-和-Promise-race-的区别的使用场景"><a href="#19-Promise-all-和-Promise-race-的区别的使用场景" class="headerlink" title="19. Promise.all 和 Promise.race 的区别的使用场景"></a>19. Promise.all 和 Promise.race 的区别的使用场景</h3><p><strong>（1）Promise.all</strong> <code>Promise.all</code>可以将多个<code>Promise</code>实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是<strong>一个结果数组</strong>，而失败的时候则返回<strong>最先被 reject 失败状态的值</strong>。</p><p>Promise.all 中传入的是数组，返回的也是是数组，并且会将进行映射，传入的 promise 对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</p><p>需要注意，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用 Promise.all 来解决。</p><p><strong>（2）Promise.race</strong></p><p>顾名思义，Promse.race 就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([promise1, <span class="hljs-title function_">timeOutPromise</span>(<span class="hljs-number">5000</span>)]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;&#125;)<br></code></pre></td></tr></table></figure><h3 id="20-对-async-x2F-await-的理解"><a href="#20-对-async-x2F-await-的理解" class="headerlink" title="20. 对 async&#x2F;await 的理解"></a>20. 对 async&#x2F;await 的理解</h3><p>async&#x2F;await 其实是<code>Generator</code> 的语法糖，它能实现的效果都能用 then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在 asnyc 函数中，先来看看 async 函数返回了什么：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testAsy</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">testAsy</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p><p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：<code>then()</code> 链来处理这个 Promise 对象，就像这样：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testAsy</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span> &#125; <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">testAsy</span>()  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) result.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>&#123;     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)  <br><span class="hljs-comment">// hello world</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p><p>联想一下 Promise 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p><p><strong>注意：</strong> <code>Promise.resolve(x)</code> 可以看作是 <code>new Promise(resolve =&gt; resolve(x))</code> 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p><h3 id="21-浏览器的垃圾回收机制"><a href="#21-浏览器的垃圾回收机制" class="headerlink" title="21. 浏览器的垃圾回收机制"></a>21. 浏览器的垃圾回收机制</h3><p>markdown</p><p><code>#### （1）垃圾回收的概念 **垃圾回收**：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。 **回收机制**： -   Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。 -   JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。 -   不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。 #### （2）垃圾回收的方式 浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。 **1）标记清除** -   标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。 -   垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。 **2）引用计数** -   另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。 -   这种方法会引起**循环引用**的问题：例如：`obj1`和`obj2`通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，`obj1`和`obj2`还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。 ``` function fun() &#123;     let obj1 = &#123;&#125;;     let obj2 = &#123;&#125;;     obj1.a = obj2; // obj1 引用 obj2     obj2.a = obj1; // obj2 引用 obj1 &#125; ``` 这种情况下，就要手动释放变量占用的内存： ``` obj1.a =  null  obj2.a =  null ``` #### （3）减少垃圾回收 虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。 -   **对数组进行优化：** 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。 -   **对**`object`**进行优化：** 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。 -   **对函数进行优化：** 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</code></p><h3 id="22-哪些情况会导致内存泄漏"><a href="#22-哪些情况会导致内存泄漏" class="headerlink" title="22. 哪些情况会导致内存泄漏"></a>22. 哪些情况会导致内存泄漏</h3><p>markdown</p><p><code>以下四种情况会造成内存的泄漏： -   **意外的全局变量：** 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。 -   **被遗忘的计时器或回调函数：** 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。 -   **脱离 DOM 的引用：** 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。 -   **闭包：** 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</code></p><h3 id="23-ES6-有哪些新特性"><a href="#23-ES6-有哪些新特性" class="headerlink" title="23. ES6 有哪些新特性"></a>23. ES6 有哪些新特性</h3><p>1.箭头函数</p><p>2.解构赋值</p><p>3.模板字符串</p><p>4.promise</p><p>5.symbol Symbol 是 ES6 中引入的一种新的基本数据类型,用于表示一个独一无二的值,不能与其他数据类型进行运算</p><p>6.新的变量声明方式-let 和 const</p><p>7.模块化-es6 新增了模块化，根据功能封装模块，通过 import 导入，然后通过 export 导出也可以使用 export default 导出</p><p>8.for…of 循环,用于遍历可迭代对象(如数组、Map 和 Set)中的元素</p><p>9.扩展运算符:使用 … 可以将数组或对象展开成多个参数,或者将多个参数合并成一个数组</p><p>10.展开运算符:在 ES6 中用…来表示展开运算符,它可以将数组或者对象进行展开</p><p>11.Map 和 Set，引入了两种新的数据结构，分别用于存储键值对和唯一值</p><p>12.Proxy，允许在对象和函数调用等操作前后添加自定义的行为</p><p>13.类（Class），引入了面向对象编程中类的概念</p><p>14.默认参数（Default Parameter），在定义函数时可以给参数设置默认值</p><h3 id="24-匿名函数的典型应用场景是什么？"><a href="#24-匿名函数的典型应用场景是什么？" class="headerlink" title="24. 匿名函数的典型应用场景是什么？"></a>24. 匿名函数的典型应用场景是什么？</h3><p>匿名函数可以在 IIFE 中使用，来封装局部作用域内的代码，以便其声明的变量不会暴露到全局作用域。</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;   <span class="hljs-comment">// 一些代码。 &#125;)();</span><br></code></pre></td></tr></table></figure><p>匿名函数可以作为只用一次，不需要在其他地方使用的回调函数。当处理函数在调用它们的程序内部被定义时，代码具有更好地自闭性和可读性，可以省去寻找该处理函数的函数体位置的麻烦。</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>匿名函数可以用于函数式编程或 Lodash（类似于回调函数）。</p><p>c</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> double = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">return</span> el * <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(double) <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><h3 id="25-你能举出一个柯里化函数（curry-function）的例子吗？它有哪些好处？"><a href="#25-你能举出一个柯里化函数（curry-function）的例子吗？它有哪些好处？" class="headerlink" title="25.你能举出一个柯里化函数（curry function）的例子吗？它有哪些好处？"></a>25.你能举出一个柯里化函数（curry function）的例子吗？它有哪些好处？</h3><p>柯里化（currying）是一种模式，其中具有多个参数的函数被分解为多个函数，当被串联调用时，将一次一个地累积所有需要的参数。这种技术帮助编写函数式风格的代码，使代码更易读、紧凑。值得注意的是，对于需要被 curry 的函数，它需要从一个函数开始，然后分解成一系列函数，每个函数都需要一个参数。</p><p>scss</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn</span>) &#123;   <span class="hljs-keyword">if</span> (fn.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;     <span class="hljs-keyword">return</span> fn;   &#125; ​   <span class="hljs-keyword">function</span> <span class="hljs-title function_">_curried</span>(<span class="hljs-params">depth, args</span>) &#123;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">newArgument</span>) &#123;       <span class="hljs-keyword">if</span> (depth - <span class="hljs-number">1</span> === <span class="hljs-number">0</span>) &#123;         <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(...args, newArgument);       &#125;       <span class="hljs-keyword">return</span> <span class="hljs-title function_">_curried</span>(depth - <span class="hljs-number">1</span>, [...args, newArgument]);     &#125;;   &#125; ​   <span class="hljs-keyword">return</span> <span class="hljs-title function_">_curried</span>(fn.<span class="hljs-property">length</span>, []); &#125; ​ <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;   <span class="hljs-keyword">return</span> a + b; &#125; ​ <span class="hljs-keyword">var</span> curriedAdd = <span class="hljs-title function_">curry</span>(add); <span class="hljs-keyword">var</span> addFive = <span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">5</span>); ​ <span class="hljs-keyword">var</span> result = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">map</span>(addFive); <span class="hljs-comment">// [5, 6, 7, 8, 9, 10]</span><br></code></pre></td></tr></table></figure><h3 id="26-什么是事件循环？调用堆栈和任务队列之间有什么区别？"><a href="#26-什么是事件循环？调用堆栈和任务队列之间有什么区别？" class="headerlink" title="26.什么是事件循环？调用堆栈和任务队列之间有什么区别？"></a>26.什么是事件循环？调用堆栈和任务队列之间有什么区别？</h3><p>事件循环是一个单线程循环，用于监视调用堆栈并检查是否有工作即将在任务队列中完成。如果调用堆栈为空并且任务队列中有回调函数，则将回调函数出队并推送到调用堆栈中执行。</p><h3 id="27-js-设计模式有哪些？"><a href="#27-js-设计模式有哪些？" class="headerlink" title="27.js 设计模式有哪些？"></a>27.js 设计模式有哪些？</h3><p>总体来说设计模式分为三大类：(<code>C5S7B11</code>)</p><ol><li><strong>创建型模式</strong>，共五种：<strong>工厂方法模式</strong>、抽象工厂模式、<strong>单例模式</strong>、建造者模式、<strong>原型模式</strong>。</li><li><strong>结构型模式</strong>，共七种：<strong>适配器模式</strong>、<strong>装饰器模式</strong>、<strong>代理模式</strong>、外观模式、桥接模式、组合模式、享元模式。</li><li><strong>行为型模式</strong>，共十一种：策略模式、模板方法模式、<strong>观察者模式&#x2F;发布订阅模式</strong>、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ol><h2 id="手写单例模式（创建模式）"><a href="#手写单例模式（创建模式）" class="headerlink" title="手写单例模式（创建模式）"></a>手写单例模式（创建模式）</h2><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">CreateSingleton</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> instance<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (instance) &#123;<br>      <span class="hljs-keyword">return</span> instance<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-keyword">return</span> (instance = <span class="hljs-variable language_">this</span>)<br>  &#125;<br>&#125;)()<br><span class="hljs-title class_">CreateSingleton</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>代码测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Winner</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateSingleton</span>(<span class="hljs-string">&#x27;Winner&#x27;</span>); <span class="hljs-keyword">let</span> <span class="hljs-title class_">Looser</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateSingleton</span>(<span class="hljs-string">&#x27;Looser&#x27;</span>); ​ <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Winner</span> === <span class="hljs-title class_">Looser</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Winner</span>.<span class="hljs-title function_">getName</span>());  <span class="hljs-comment">// &#x27;Winner&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Looser</span>.<span class="hljs-title function_">getName</span>());  <span class="hljs-comment">// &#x27;Winner&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="手写观察者模式（行为模式）"><a href="#手写观察者模式（行为模式）" class="headerlink" title="手写观察者模式（行为模式）"></a>手写观察者模式（行为模式）</h2><p>ini</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义observe</span><br><span class="hljs-keyword">const</span> queuedObservers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">observe</span> = fn =&gt; queuedObservers.<span class="hljs-title function_">add</span>(fn); ​ ​<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">observable</span> = obj =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;   <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;     <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver);     <span class="hljs-comment">// notify     </span><br>queuedObservers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">observer</span> =&gt;</span> <span class="hljs-title function_">observer</span>());     <span class="hljs-keyword">return</span> result;   &#125; &#125;);<br></code></pre></td></tr></table></figure><p>代码测试</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj = <span class="hljs-title function_">observable</span>(&#123;   <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;789&#x27;</span> &#125;) ​ <span class="hljs-title function_">observe</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了&#x27;</span>) &#125;) ​ obj.<span class="hljs-property">name</span> =<span class="hljs-string">&quot;前端柒八九&quot;</span> <span class="hljs-comment">// 触发了 // 前端柒八九</span><br></code></pre></td></tr></table></figure><h2 id="手写发布订阅-（行为模式）"><a href="#手写发布订阅-（行为模式）" class="headerlink" title="手写发布订阅 （行为模式）"></a>手写发布订阅 （行为模式）</h2><p>kotlin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;   caches = &#123;&#125;; <span class="hljs-comment">// 事件中心      // eventName事件名-独一无二, fn订阅后执行的自定义行为   </span><br>on (eventName, fn)&#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName] || [];     <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName].<span class="hljs-title function_">push</span>(fn);   &#125;      <span class="hljs-comment">// 发布 =&gt; 将订阅的事件进行统一执行   </span><br>emit (eventName, data) &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName]) &#123;       <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName]       .<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>(data));     &#125;   &#125;   <span class="hljs-comment">// 取消订阅 =&gt; 若fn不传, 直接取消该事件所有订阅信息   </span><br>off (eventName, fn) &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName]) &#123;       <span class="hljs-keyword">const</span> newCaches = fn          ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e !== fn)          : [];       <span class="hljs-variable language_">this</span>.<span class="hljs-property">caches</span>[eventName] = newCaches;     &#125;   &#125; ​ &#125;<br></code></pre></td></tr></table></figure><p>代码测试</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(); ​ l1 = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`l1_<span class="hljs-subst">$&#123;data&#125;</span>`</span>) l2 = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`l2_<span class="hljs-subst">$&#123;data&#125;</span>`</span>) ​ ob.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;event1&#x27;</span>,l1) ob.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;event1&#x27;</span>,l2) ​ <span class="hljs-comment">//发布订阅</span><br>ob.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;event1&#x27;</span>,<span class="hljs-number">789</span>)  <span class="hljs-comment">// l1_789 // l2_789 ​</span><br><span class="hljs-comment">// 取消，订阅l1</span><br>ob.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;event1&#x27;</span>,l1) ​ ob.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;event1&#x27;</span>,<span class="hljs-number">567</span>) <span class="hljs-comment">//l2_567</span><br><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 观察者模式 VS 发布订阅模式</span><br><span class="hljs-string"></span><br><span class="hljs-string">![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c708723f8b984c1c9ceaf24d674306b3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1014&amp;h=804&amp;s=19910&amp;e=webp&amp;b=fdf8f4)</span><br><span class="hljs-string"></span><br><span class="hljs-string">1. 从表面上看：</span><br><span class="hljs-string"></span><br><span class="hljs-string">    - 观察者模式里，只有两个角色 —— **观察者** + **被观察者**</span><br><span class="hljs-string">    - 而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— &#123;经纪人|Broker&#125;</span><br><span class="hljs-string">2. 往更深层次讲：</span><br><span class="hljs-string"></span><br><span class="hljs-string">    - 观察者和被观察者，是`</span>松耦合<span class="hljs-string">`的关系</span><br><span class="hljs-string">    - 发布者和订阅者，则完全不存在耦合</span><br><span class="hljs-string">3. 从使用层面上讲：</span><br><span class="hljs-string"></span><br><span class="hljs-string">    - 观察者模式，多用于**单个应用内部**</span><br><span class="hljs-string">    - 发布订阅模式，则更多的是一种&#123;跨应用的模式|cross-application pattern&#125; ，比如我们常用的消息中间件</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">转至 [面试](https://juejin.cn/user/835284567342782/posts)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hooks简介</title>
    <link href="/2024/07/24/hooks/"/>
    <url>/2024/07/24/hooks/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a><a href="https://so.csdn.net/so/search?q=React&spm=1001.2101.3001.7020">React</a> Hooks</h1><h2 id="Hooks简介"><a href="#Hooks简介" class="headerlink" title="Hooks简介"></a>Hooks简介</h2><blockquote><p>介绍Hooks之前，首先要说一下React的组件创建方式，一种是类组件，一种是纯函数组件，并且React团队希望，组件不要变成复杂的容器，最好只是数据流的管道。开发者根据需要，组合管道即可。也就是说组件的最佳写法应该是函数，而不是类。</p></blockquote><p>但是，在以往开发中类组件和纯函数组件的区别是很大的，纯函数组件有着类组件不具备的多种特点：</p><ul><li>纯函数组件没有状态</li><li>纯函数组件没有生命周期</li><li>纯函数组件没有this</li></ul><p>这就注定，我们所推崇的函数组件，只能做UI展示的功能，涉及到状态的管理与切换，不得不用类组件或者redux，但类组件也是有缺点的，比如，遇到简单的页面，代码会显得很重，并且每创建一个类组件，都要去继承一个React实例</p><p><strong>React Hooks：</strong> 就是用函数的形式代替原来的继承类的形式，并且使用预函数的形式管理state，有Hooks可以不再使用类的形式定义组件了。</p><p>这时候认知也要发生变化了，原来把组件分为有状态组件和无状态组件，有状态组件用类的形式声明，无状态组件用函数的形式声明。那现在所有的组件都可以用函数来声明了。</p><p><strong>使用Hooks的优点：</strong></p><ul><li>告别难以理解的Class( this 和 生命周期 的痛点)</li><li>解决业务逻辑难以拆分的问题</li><li>使状态逻辑复用变得简单可行</li><li>函数组件从设计思想上来看更加契合React的理念</li></ul><p><strong>Hooks并非万能：</strong></p><ul><li>Hooks暂时还不能完全的为函数组件补齐类组件地能力（如生命周期的getSnapshotBeforeUpdate、componentDidCatch方法暂时还未实现）</li><li>将类组件的复杂变成函数组件的轻量，可能使用者并不能很好地消化这种复杂</li><li>Hooks在使用层面有着严格地规则约束</li></ul><p><strong>例如：类组件实现计数器：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            count : <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br>    addcount = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> newCount = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">count</span>: newCount += <span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123; this.state.count &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.addcount</span> &#125;&gt;</span>count++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AddCount</span>;<br></code></pre></td></tr></table></figure><p>可以看出来，上面的代码确实很重。因此React队设计了React Hooks。React Hooks就是加强版的函数组件，可以完全不使用 class，就能写出一个全功能的组件</p><p>React Hooks 使得组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码”钩”进来。而React Hooks 就是所说的“钩子”。</p><p>那么Hooks要怎么用呢？“你需要写什么功能，就用什么钩子”。对于常见的功能，React为我们提供了一些常用的钩子，当然有特殊需要，我们也可以写自己的钩子。下面是React Hooks为我们提供的默认的四种最常用钩子：</p><ul><li>useState()</li><li>useContext()</li><li>useEffect()</li><li>useReducer()</li></ul><p>不同的钩子为函数引入不同的外部功能，上面四种钩子都带有use前缀，React Hooks约定，钩子一律使用use前缀命名。所以，自己定义的钩子都要命名为useXXX。</p><h2 id="Hook函数（9种）"><a href="#Hook函数（9种）" class="headerlink" title="Hook函数（9种）"></a>Hook函数（9种）</h2><hr><p><strong>1、State Hook</strong></p><p>useState()：状态钩子。纯函数组件没有状态，<strong>用于为函数组件引入state状态, 并进行状态数据的读写操作</strong></p><p><strong>语法、参数及返回值说明:：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [xxx, setXxx] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(initValue) <br></code></pre></td></tr></table></figure><ul><li><strong>参数:</strong> 第一次初始化指定的值在内部作缓存</li><li><strong>返回值:</strong> 包含2个元素的数组，第1个为内部当前状态值，第2个为更新状态值的函数</li></ul><p><strong>setXxx()2种写法:</strong></p><ul><li><strong>setXxx(newValue)</strong>: 参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值</li><li><strong>setXxx(value &#x3D;&gt; newValue)</strong>: 参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值</li></ul><p><strong>例如：React Hooks 实现计数器：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>,&#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">NewCount</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> [ count,setCount ] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    addCount = <span class="hljs-function">()=&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> newCount = count;<br>        <span class="hljs-title function_">setCount</span>(newCount +=<span class="hljs-number">1</span>)<br>    &#125;<br>   <span class="hljs-keyword">return</span> (<br>       <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123; count &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">addCount</span> &#125;&gt;</span>Count++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/&gt;</span></span><br>   )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NewCount</span>;<br></code></pre></td></tr></table></figure><p>代码看起来更加的轻便简洁，没有了继承，没有了渲染逻辑，没有了<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&spm=1001.2101.3001.7020">生命周期</a>等</p><hr><p><strong>2、Context Hook</strong></p><p>useContext()：共享状态钩子。<strong>作用就是可以做状态的分发</strong>，在React16.X以后支持，避免了react逐层通过Props传递数据。</p><blockquote><p>Context：一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p></blockquote><p><strong>使用语法和说明：</strong></p><ol><li><p>创建Context容器对象：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">XxxContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()  <br></code></pre></td></tr></table></figure></li><li><p>渲染子组件时，外面包裹xxxContext.Provider， 通过value属性给后代组件传递数据：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;xxxContext.<span class="hljs-property">Provider</span> value=&#123;数据&#125;&gt;<br>&lt;子组件/&gt;<br>&lt;/xxxContext.<span class="hljs-property">Provider</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>后代组件读取数据：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;&#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">XxxContext</span>)<br></code></pre></td></tr></table></figure></li></ol><p><strong>例如：A组件和B组件需要共享一个状态:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HookTest</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">AppContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">A</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123; name &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">AppContext</span>)<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                我是A组件,我的名字是：&#123; name &#125;；</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是A的子标签：&#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        )<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">B</span>= (<span class="hljs-params"></span>)=&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123; name &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">AppContext</span>);<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是B组件,名字是： &#123; name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        )<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AppContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &#x27;张三&#x27;&#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">A</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">B</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">AppContext.Provider</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HookTest</span>;<br></code></pre></td></tr></table></figure><hr><p><strong>3、Effect Hook</strong></p><p>useEffect()：副作用钩子。<strong>用来更好的执行副作用操作</strong>(用于模拟类组件中的生命周期钩子)，如异步请求等，在类组件中会把请求放在componentDidMount里面，在函数组件中可以使用useEffect()</p><p><strong>语法和说明:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123; <br>      <span class="hljs-comment">// 在此可以执行任何带副作用操作</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 在组件卸载前执行</span><br>        <span class="hljs-comment">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br>      &#125;<br>&#125;, [stateValue]) <span class="hljs-comment">// 如果指定的是[], 回调函数只会在第一次render()后执行</span><br></code></pre></td></tr></table></figure><p><strong>参数、返回值说明：</strong></p><ul><li>useEffect()接受两个参数，<strong>第一个参数是要进行的异步操作</strong>，<strong>第二个参数是一个数组</strong>，用来给出Effect的<strong>依赖项</strong>，只要这个数组发生变化，useEffect()就会执行。</li><li>当第二项省略不填时。useEffect()会在每次组件渲染时都会执行useEffect，只要更新就会执行。</li><li>当第二项传 <strong>空数组[ ]</strong> 时，只会在组件挂载后运行一次。</li><li>useEffect()返回值可以是一个函数，在组件销毁的时候会被调用。清理这些副作用可以进行如取消订阅、清除定时器操作，类似于componentWillUnmount。</li></ul><p><strong>React中的副作用操作:</strong></p><ul><li>发ajax请求数据获取</li><li>设置订阅 &#x2F; 启动定时器</li><li>手动更改真实DOM</li></ul><p><strong>useEffect两个注意点：</strong></p><ul><li>React首次渲染和之后的每次渲染都会调用一遍useEffect函数，而之前要用两个生命周期函数分别表示 <strong>首次渲染(componentDidMonut)</strong> 和<strong>更新导致的重新渲染(componentDidUpdate)</strong></li><li>useEffect中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而componentDidMonut和componentDidUpdate中的代码都是同步执行的。</li></ul><p><strong>总结：</strong> 可以把 useEffect Hook 看做如下三个函数的组合 ：<strong>componentDidMount()、componentDidUpdate()、componentWillUnmount()</strong></p><p>1、类似于componentDidMount的useEffect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">useEffcet</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;类似于componentDidMount，通常在此处调用api获取数据&#x27;</span>)<br>  &#125;, [])<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Demo</span><br></code></pre></td></tr></table></figure><p>2、类似于componentWillUnmount的useEffect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">useEffcet</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;类似于componentWillUnmount，通常用于清除副作用&#x27;</span>);<br>&#125;<br>  &#125;, [])<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Demo</span><br></code></pre></td></tr></table></figure><p>3、类似于componentDidUpdate的useEffect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState,useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count,setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-title function_">useEffcet</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当count发生改变时，执行当前区域的代码&#x27;</span>)<br>  &#125;, [count])<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>4、Reducer Hook</strong></p><p>useReducer()：Action钩子。在使用React的过程中，如遇到状态管理，一般会用到Redux。而React本身是不提供状态管理的。而useReducer() <strong>提供了状态管理</strong>。</p><p>首先，关于redux我们都知道，其原理是<strong>通过用户在页面中发起action，从而通过reducer方法来改变state，从而实现页面和状态的通信。</strong></p><p>而Reducer的形式是(state, action) &#x3D;&gt; newstate。hooks的形式如下：</p><p><strong>语法格式：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState)<br></code></pre></td></tr></table></figure><p><strong>参数、返回值说明：</strong></p><p>它接受 <strong>reducer函数</strong> 和 <strong>状态的初始值</strong> 作为参数，返回一个<strong>数组</strong>，其中第一项为<strong>当前的状态值</strong>，第二项为<strong>发送action的dispatch函数</strong>。</p><p><strong>例如：使用useReducer()实现一个计数器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>  &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HookReducer</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state,action</span>)=&gt; &#123;<br>        <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                ...state,<br>                <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> state<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;add&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">const</span> [state,dispatch ] = <span class="hljs-title function_">useReducer</span>(reducer,&#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">addCount</span> &#125;&gt;</span>useReducer<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HookReducer</span>;<br></code></pre></td></tr></table></figure><p>通过代码可以看到，使用useReducer()代替了Redux的功能，但useReducer无法提供中间件等功能，假如有这些需求，还是需要用到redux。</p><hr><p><strong>5、Ref Hook</strong></p><p>userRefef()：Ref Hook可以<strong>在函数组件中存储、查找组件内的标签或任意其它数据</strong></p><p><strong>语法和参数说明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> refContainer = <span class="hljs-title function_">useRef</span>()<br></code></pre></td></tr></table></figure><p>useRef返回一个可变的ref对象，useRef接受一个参数绑定在返回的ref对象的current属性上，返回的ref对象在整个生命周期中保持不变。</p><p>作用：保存标签对象，功能与React.createRef()一样</p><p><strong>例子：input上绑定一个ref，使得input在渲染后自动焦点聚焦</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>&#123; useRef,useEffect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">RefComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    &#125;)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;/</span>&gt;</span></span><br>    ) <br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>6、Memo Hook</strong></p><p>useMemo()： 主要<strong>用来解决使用React hooks产生的无用渲染的性能问题</strong>。</p><p><strong>语法和参数说明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cacheSomething = <span class="hljs-title function_">useMemo</span>(create,deps)<br></code></pre></td></tr></table></figure><ul><li><code>create</code>：第一个参数为一个函数，函数的返回值作为缓存值</li><li><code>deps</code>： 第二个参数为一个数组，存放当前 useMemo 的依赖项，在函数组件下一次执行的时候，会对比 deps 依赖项里面的状态，是否有改变，如果有改变重新执行 create ，得到新的缓存值。</li><li><code>cacheSomething</code>：返回值，执行 create 的返回值。如果 deps 中有依赖项改变，返回的重新执行 create 产生的值，否则取上一次缓存</li></ul><p>使用function的形式来声明组件，失去了shouldCompnentUpdate（在组件更新之前）这个生命周期，也就是说没有办法通过组件更新前条件来决定组件是否更新。</p><p>而且在函数组件中，也不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。</p><p><strong>useMemo原理：</strong></p><p>useMemo 会记录上一次执行 create 的返回值，并把它绑定在函数组件对应的 fiber 对象上，只要组件不销毁，缓存值就一直存在，但是 deps 中如果有一项改变，就会重新执行 create ，返回值作为新的值记录到 fiber 对象上。</p><p><strong>useMemo应用场景：</strong></p><ul><li>可以缓存 element 对象，从而达到按条件渲染组件，优化性能的作用。</li><li>如果组件中不期望每次 render 都重新计算一些值，可以利用 useMemo 把它缓存起来。</li><li>可以把函数和属性缓存起来，作为 PureComponent 的绑定方法，或者配合其他Hooks一起使用</li></ul><hr><p><strong>7、Callback Hook</strong></p><p>useCallback()： 主要<strong>是为了性能的优化</strong></p><p><strong>useCallback(fn, deps) 相当于 useMemo(() &#x3D;&gt; fn, deps)</strong></p><p>可以认为是对依赖项的监听，接受一个<strong>回调函数</strong>和<strong>依赖项数组</strong>。</p><ul><li>useCallback会返回一个函数的memoized(记忆的)值。</li><li>该回调函数仅在某个依赖项改变时才会</li><li>在依赖不变的情况下，多次定义的时候，返回的值是相同的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useState,useCallback&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">CallbackComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">let</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">const</span> memoized = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;, [count])<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;记忆：&quot;</span>, <span class="hljs-title function_">memoized</span>());<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;原始：&quot;</span>, num);<br>   <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;setCount(count + 1)&#125;&#125;&gt; count+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;setNum(num + 1)&#125;&#125;&gt; num+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CallbackComponent</span><br></code></pre></td></tr></table></figure><p>如果没有传入依赖项数组，那么记忆函数在每次渲染的时候都会更新。</p><hr><p><strong>8、LayoutEffect Hook</strong></p><p>useLayoutEffect() ：和useEffect相同，<strong>都是用来执行副作用，但是它会在所有的DOM变更之后同步调用effect</strong>。useLayoutEffect和useEffect最大的区别就是一个是同步，一个是异步。</p><p>从这个Hook的名字上也可以看出，它主要用来读取DOM布局并触发同步渲染，在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。</p><p>官网建议还是尽可能的是使用标准的useEffec以避免阻塞视觉更新。</p><hr><p><strong>9、ImperativeHandle Hook</strong></p><p>useImperativeHandle()： 可以<strong>在使用 ref 时自定义暴露给父组件的实例值。</strong></p><p>就是说：当使用父组件把ref传递给子组件的时候，这个Hook允许在子组件中把自定义实例附加到父组件传过来的ref上，有利于父组件控制子组件。</p><p><strong>使用方式：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;useEffect,useRef,useImperativeHandle&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;forwardRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FancyInput</span>(<span class="hljs-params">props, ref</span>) &#123;<br>    <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>();<br>    <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>        <span class="hljs-attr">focus</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            inputRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<br>    &#125;));<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span>;<br>&#125;<br><span class="hljs-title class_">FancyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-title class_">FancyInput</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ImperativeHandleTest</span>=(<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ref);<br>        ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    &#125;)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">FancyInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;/</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ImperativeHandleTest</span><br></code></pre></td></tr></table></figure><h2 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h2><blockquote><p>有时候我们需要创建自己想要的Hooks，来满足更便捷的开发，就是根据业务场景对其它Hooks进行组装，从而得到满足自己需求的钩子。</p></blockquote><p><strong>自定义 Hooks：是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook</strong></p><p><strong>自定义Hooks：可以封装状态，能够更好的实现状态共享</strong></p><p>自定义hooks可以说成是一种约定而不是功能。当一个函数以use开头并且在函数内部调用其他hooks，那么这个函数就可以成为自定义hooks</p><p><strong>例如：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState,useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">usePerson</span> = (<span class="hljs-params">&#123;name&#125;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br>    <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;&#125;)<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>)<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>            <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>)<br>            <span class="hljs-title function_">setPerson</span>(&#123;name&#125;)<br>        &#125;,<span class="hljs-number">2000</span>)<br>    &#125;,[name])<br>    <span class="hljs-keyword">return</span> [loading,person]<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">AsyncPage</span> = (<span class="hljs-params">name</span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> [loading,person] = <span class="hljs-title function_">usePerson</span>(name)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            &#123;loading?<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123; person.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">PersonPage</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br>    <span class="hljs-keyword">const</span> [state,setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeName</span> = (<span class="hljs-params">name</span>)=&gt; &#123;<br>        <span class="hljs-title function_">setState</span>(name)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">AsyncPage</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">state</span> &#125; /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> ()=&gt;</span> &#123; changeName(&#x27;郭靖&#x27;)&#125;&#125;&gt;郭靖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> ()=&gt;</span> &#123; changeName(&#x27;黄蓉&#x27;)&#125;&#125;&gt;黄蓉<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PersonPage</span>;<br><br></code></pre></td></tr></table></figure><p>上面代码中，封装成了自己的Hooks，便于共享。其中，usePerson()为自定义Hooks它接受一个字符串，返回一个数组，数组中包括两个数据的状态，之后在使用usePerson()时，会根据传入的参数不同而返回不同的状态，然后很简便的应用于我们的页面中。</p><p>这是一种非常简单的自定义Hook。如果项目大的话使用自定义Hook会抽离可以抽离公共代码，极大的减少我们的代码量，提高开发效率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>call、apply、bind的区别与应用场景</title>
    <link href="/2024/07/24/callapplybind/"/>
    <url>/2024/07/24/callapplybind/</url>
    
    <content type="html"><![CDATA[<h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><h3 id="为什么会有call和apply？"><a href="#为什么会有call和apply？" class="headerlink" title="为什么会有call和apply？"></a>为什么会有call和apply？</h3><p>call和apply两个方法的作用基本相同，它们都是为了改变某个函数执行时的上下文（context）而建立的， 他的真正强大之处就是能够扩充函数赖以运行的作用域。通俗一点讲，就是改变函数体内部this 的指向。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> o = &#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayColor</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>);<br>&#125;<br><span class="hljs-title function_">sayColor</span>();<span class="hljs-comment">//red</span><br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//red，把函数体sayColor内部的this，绑到当前环境（作用域）(这段代码所处的环境)</span><br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>);<span class="hljs-comment">//red，把函数体sayColor内部的this，绑到window（全局作用域）</span><br>sayColor.<span class="hljs-title function_">call</span>(o);<span class="hljs-comment">//blue</span><br></code></pre></td></tr></table></figure><h3 id="call-thisValue-arg1-arg2-…"><a href="#call-thisValue-arg1-arg2-…" class="headerlink" title="call( thisValue , arg1, arg2, … )"></a>call( thisValue , arg1, arg2, … )</h3><blockquote><p>注意：如果call方法没有参数，或者参数为null或undefined，则等同于指向全局对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> o = &#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayColor</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>);<br>&#125;<br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//red</span><br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>);<span class="hljs-comment">//red</span><br>sayColor.<span class="hljs-title function_">call</span>();<br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>);<br>sayColor.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>);<br>sayColor.<span class="hljs-title function_">call</span>(o);<span class="hljs-comment">//blue</span><br></code></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>判断对象类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(arr); <span class="hljs-comment">// [object Array]</span><br><span class="hljs-comment">//把函数体Object.prototype.toString()方法内部的this，绑到arr的执行环境（作用域）</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="手撕call"><a href="#手撕call" class="headerlink" title="手撕call"></a>手撕call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>);<br>&#125;<br>bar.<span class="hljs-title function_">myCall</span>(foo); <span class="hljs-comment">// 1</span><br>--------------------------------------------------------------------<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">// 取得传入的对象（执行上下文），比如上文的foo对象，这里的context就相当于上文的foo</span><br>  <span class="hljs-comment">// 不传第一个参数，默认是window,</span><br>  <span class="hljs-keyword">var</span> context = context || <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-comment">// 给context添加一个属性，这时的this指向调用myCall的函数，比如上文的bar函数</span><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<span class="hljs-comment">//这里的context.fn就相当于上文的bar函数</span><br>  <span class="hljs-comment">// 通过展开运算符和解构赋值取出context后面的参数，上文的例子没有传入参数列表</span><br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 执行函数（相当于上文的bar(...args)）</span><br>  <span class="hljs-keyword">var</span> result = context.<span class="hljs-title function_">fn</span>(...args);<br>  <span class="hljs-comment">// 删除函数</span><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="apply-thisValue-arg1-arg2-…"><a href="#apply-thisValue-arg1-arg2-…" class="headerlink" title="apply( thisValue , [arg1, arg2, …] )"></a>apply( thisValue , [arg1, arg2, …] )</h3><p>很明显，我们看标题的可以知道call和apply的一个区别了，它们两个唯一的区别就是传参列表的不同，apply是接收的参数是一个数组。</p><h3 id="手撕apply"><a href="#手撕apply" class="headerlink" title="手撕apply"></a>手撕apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>);<br>&#125;<br>bar.<span class="hljs-title function_">myApply</span>(foo); <span class="hljs-comment">// 1</span><br>--------------------------------------------------------------------<br>  <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-keyword">var</span> context = context || <span class="hljs-variable language_">window</span>;<br>    context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">var</span> result;<br>    <span class="hljs-comment">// 判断第二个参数是否存在，也就是context后面有没有一个数组</span><br>    <span class="hljs-comment">// 如果存在，则需要展开第二个参数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]) &#123;<br>      result = context.<span class="hljs-title function_">fn</span>(...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result = context.<span class="hljs-title function_">fn</span>();<br>    &#125;<br>    <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>找出数组中最大或最小的元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>];<br><span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>, a); <span class="hljs-comment">// 15</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, a); <span class="hljs-comment">// 2</span><br><span class="hljs-comment">/* ES6的方法 */</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...[<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>]); <span class="hljs-comment">// 12 等同于Math.max(10, 2, 4, 15, 9);t</span><br></code></pre></td></tr></table></figure><ul><li>可以将一个类似（伪）数组的对象（比如arguments对象）转为真正的数组。 前提： 被处理的对象必须有length属性，以及相对应的数字键。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ArrayLike</span> = &#123; <span class="hljs-comment">// 一个类似数组的对象</span><br>  <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-comment">//接收的是对象，返回的是数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(&#123;<span class="hljs-number">0</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">length</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// [1]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(&#123;<span class="hljs-number">0</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// []</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(&#123;<span class="hljs-number">0</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">length</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// [1, undefined]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(&#123;<span class="hljs-attr">length</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// [undefined]</span><br><span class="hljs-comment">//（切下）[].slice(1, n)，返回索引为1到索引为n-1的数组</span><br><br><span class="hljs-comment">/* ES6的方法 */</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">ArrayLike</span>); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><br><span class="hljs-comment">// 没有部署Iterator接口的类似数组的对象，扩展运算符就“无法”将其转为真正的数组，但Array.from()可以</span><br>...<span class="hljs-title class_">ArrayLike</span>; <span class="hljs-comment">//  Found non-callable @@iterator</span><br><span class="hljs-comment">// 只要是部署了Iterator接口的数据结构，Array.from 都能将其转为数组</span><br></code></pre></td></tr></table></figure><ul><li>数组追加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>[].<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(arr1, arr2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1); <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2); <span class="hljs-comment">// [4, 5, 6]</span><br><span class="hljs-comment">/* ES6的方法 */</span><br>arr1.<span class="hljs-title function_">push</span>(...arr2); <span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><ul><li>数组合并</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;ds&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span> &#125;];<br><span class="hljs-comment">// var arr = arr1.concat(arr2);//简单做法</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(arr1,arr2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);<br><span class="hljs-comment">/* ES6的方法 */</span><br>[...arr1,...arr2]<br></code></pre></td></tr></table></figure><h3 id="bind-thisArg-arg1-arg2-…"><a href="#bind-thisArg-arg1-arg2-…" class="headerlink" title="bind( thisArg[, arg1[, arg2[, …]]])"></a>bind( thisArg[, arg1[, arg2[, …]]])</h3><ul><li>call和apply它们两个是改变this的指向之后立即调用该函数，而bind则不同，它是创建一个新函数，我们必须手动去调用它。</li><li>bind()是ES5新增的一个方法</li><li>传参和call或apply类似</li><li>不会执行对应的函数，call或apply会自动执行对应的函数</li><li>bind会返回对函数的引用</li></ul><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a + b)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> b = a.<span class="hljs-property">fn</span>;<br>b.<span class="hljs-title function_">call</span>(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//立即调用该函数</span><br>b.<span class="hljs-title function_">bind</span>(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)();<span class="hljs-comment">//手动调用()，它返回一个原函数的拷贝（新的，不是原函数），并拥有指定的this值和初始参数。</span><br></code></pre></td></tr></table></figure><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;JuctTr&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给document添加click事件监听，并绑定ExecuteFun函数</span><br><span class="hljs-comment"> * 通过bind方法设置ExecuteFun的this为obj</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//document.addEventListener(&#x27;click&#x27;,ExecuteFun.call(obj),false);</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-title class_">ExecuteFun</span>.<span class="hljs-title function_">bind</span>(obj),<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ExecuteFun</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="手撕bind"><a href="#手撕bind" class="headerlink" title="手撕bind"></a>手撕bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-comment">// 返回一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> F) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">_this</span>(...args, ...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">apply</span>(context, args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式不要背</title>
    <link href="/2022/10/28/reg/"/>
    <url>/2022/10/28/reg/</url>
    
    <content type="html"><![CDATA[<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/16/16abe9df51b66af0~tplv-t2oaga2asx-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="正则表达式不要背"></p><p>正则表达式一直是困扰很多程序员的一门技术，当然也包括曾经的我。大多数时候我们在开发过程中要用到某些正则表达式的时候，都会打开谷歌或百度直接搜索然后拷贝粘贴。当下一次再遇到相同问题的时候，同样的场景又再来一遍。作为一门用途很广的技术，我相信深入理解正则表达式并能融会贯通是值得的。所以，希望这篇文章能帮助大家理清思路，搞懂正则表达式各种符号之间的内在联系，形成知识体系，当下次再遇到正则表达式的时候可以不借助搜索引擎，自己解决。</p><h1 id="正则表达式到底是什么"><a href="#正则表达式到底是什么" class="headerlink" title="正则表达式到底是什么"></a>正则表达式到底是什么</h1><p>正则表达式(Regular Expression)其实就是一门工具，<strong>目的</strong>是为了字符串模式匹配，从而实现搜索和替换功能。它起源于上个20世纪50年代科学家在数学领域做的一些研究工作，后来才被引入到计算机领域中。从它的命名我们可以知道，它是一种<strong>用来描述规则的表达式</strong>。而它的底层原理也十分简单，就是使用状态机的思想进行模式匹配。大家可以利用<a href="https://link.juejin.cn/?target=https://regexper.com/">regexper.com</a>这个工具很好地可视化自己写的正则表达式:</p><p>如<code>/\d\w+/</code>这个正则生成的状态机图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/16/16abe9d9357f691c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>对于具体的算法实现，大家如果感兴趣可以阅读《算法导论》。</p><h1 id="从字符出发"><a href="#从字符出发" class="headerlink" title="从字符出发"></a>从字符出发</h1><p>我们学习一个系统化的知识，一定要从其基础构成来了解。正则表达式的基本<strong>组成元素</strong>可以分为：<strong>字符和元字符</strong>。字符很好理解，就是基础的计算机字符编码，通常正则表达式里面使用的就是数字、英文字母。而元字符，也被称为特殊字符，是一些用来表示特殊语义的字符。如^表示非,|表示或等。利用这些元字符，才能构造出强大的表达式模式(pattern)。接下来，我们就来从这些基本单位出发，来学习一下如何构建正则表达式。</p><h2 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h2><p>最简单的正则表达式可以由简单的数字和字母组成，没有特殊的语义，纯粹就是一一对应的关系。如想在’apple’这个单词里找到‘a’这个字符，就直接用<code>/a/</code>这个正则就可以了。</p><p>但是如果想要匹配特殊字符的话，就得请出我们第一个元字符**<code>\</code>**， 它是转义字符字符，顾名思义，就是让其后续的字符失去其本来的含义。举个例子：</p><p>我想匹配<code>*</code>这个符号，由于<code>*</code>这个符号本身是个特殊字符，所以我要利用转义元字符<code>\</code>来让它失去其本来的含义：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/\*/</span><br></code></pre></td></tr></table></figure><p>如果本来这个字符不是特殊字符，使用转义符号就会让它拥有特殊的含义。我们常常需要匹配一些特殊字符，比如空格，制表符，回车，换行等, 而这些就需要我们使用转义字符来匹配。为了便于记忆，我整理了下面这个表格，并附上记忆方式：</p><table><thead><tr><th>特殊字符</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>换行符</td><td>\n</td><td><strong>n</strong>ew line</td></tr><tr><td>换页符</td><td>\f</td><td><strong>f</strong>orm feed</td></tr><tr><td>回车符</td><td>\r</td><td><strong>r</strong>eturn</td></tr><tr><td>空白符</td><td>\s</td><td><strong>s</strong>pace</td></tr><tr><td>制表符</td><td>\t</td><td><strong>t</strong>ab</td></tr><tr><td>垂直制表符</td><td>\v</td><td><strong>v</strong>ertical tab</td></tr><tr><td>回退符</td><td>[\b]</td><td><strong>b</strong>ackspace,之所以使用[]符号是避免和\b重复</td></tr></tbody></table><h2 id="多个字符"><a href="#多个字符" class="headerlink" title="多个字符"></a>多个字符</h2><p>单个字符的映射关系是一对一的，即正则表达式的被用来筛选匹配的字符只有一个。而这显然是不够的，只要引入集合区间和通配符的方式就可以实现一对多的匹配了。</p><p>在正则表达式里，集合的定义方式是使用中括号<code>[</code>和<code>]</code>。如<code>/[123]/</code>这个正则就能同时匹配1,2,3三个字符。那如果我想匹配所有的数字怎么办呢？从0写到9显然太过低效，所以元字符<code>-</code>就可以用来表示区间范围，利用<code>/[0-9]/</code>就能匹配所有的数字, <code>/[a-z]/</code>则可以匹配所有的英文小写字母。</p><p>即便有了集合和区间的定义方式，如果要同时匹配多个字符也还是要一一列举，这是低效的。所以在正则表达式里衍生了一批用来同时匹配多个字符的简便正则表达式:</p><table><thead><tr><th>匹配区间</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>除了换行符之外的任何字符</td><td>.</td><td>句号,除了句子结束符</td></tr><tr><td>单个数字, [0-9]</td><td>\d</td><td><strong>d</strong>igit</td></tr><tr><td>除了[0-9]</td><td>\D</td><td><strong>not</strong> <strong>d</strong>igit</td></tr><tr><td>包括下划线在内的单个字符，[A-Za-z0-9_]</td><td>\w</td><td><strong>w</strong>ord</td></tr><tr><td>非单字字符</td><td>\W</td><td><strong>not</strong> <strong>w</strong>ord</td></tr><tr><td>匹配空白字符,包括空格、制表符、换页符和换行符</td><td>\s</td><td><strong>s</strong>pace</td></tr><tr><td>匹配非空白字符</td><td>\S</td><td><strong>not</strong> <strong>s</strong>pace</td></tr></tbody></table><h1 id="循环与重复"><a href="#循环与重复" class="headerlink" title="循环与重复"></a>循环与重复</h1><p>一对一和一对多的字符匹配都讲完了。接下来，就该介绍如何同时匹配多个字符。要实现多个字符的匹配我们只要多次循环，重复使用我们的之前的正则规则就可以了。那么根据循环次数的多与少，我们可以分为0次，1次，多次，特定次。</p><h2 id="0-1"><a href="#0-1" class="headerlink" title="0 | 1"></a>0 | 1</h2><p>元字符<code>?</code>代表了匹配一个字符或0个字符。设想一下，如果你要匹配<code>color</code>和<code>colour</code>这两个单词，就需要同时保证<code>u</code>这个字符是否出现都能被匹配到。所以你的正则表达式应该是这样的：<code>/colou?r/</code>。</p><h2 id="gt-x3D-0"><a href="#gt-x3D-0" class="headerlink" title="&gt;&#x3D; 0"></a>&gt;&#x3D; 0</h2><p>元字符<code>*</code>用来表示匹配0个字符或无数个字符。通常用来过滤某些可有可无的字符串。</p><h2 id="gt-x3D-1"><a href="#gt-x3D-1" class="headerlink" title="&gt;&#x3D; 1"></a>&gt;&#x3D; 1</h2><p>元字符<code>+</code>适用于要匹配同个字符出现1次或多次的情况。</p><h2 id="特定次数"><a href="#特定次数" class="headerlink" title="特定次数"></a>特定次数</h2><p>在某些情况下，我们需要匹配特定的重复次数，元字符<code>&#123;</code>和<code>&#125;</code>用来给重复匹配设置精确的区间范围。如’a’我想匹配3次,那么我就使用<code>/a&#123;3&#125;/</code>这个正则，或者说’a’我想匹配至少两次就是用<code>/a&#123;2,&#125;/</code>这个正则。</p><p>以下是完整的语法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">- &#123;x&#125;: x次<br><br>- &#123;min, max&#125;： 介于min次到max次之间<br><br>- &#123;min, &#125;: 至少min次<br><br>- &#123;<span class="hljs-number">0</span>, max&#125;： 至多max次<br></code></pre></td></tr></table></figure><p>由于这些元字符比较抽象，且容易混淆，所以我用了联想记忆的方式编了口诀能保证在用到的时候就能回忆起来。</p><table><thead><tr><th>匹配规则</th><th>元字符</th><th>联想方式</th></tr></thead><tbody><tr><td>0次或1次</td><td>?</td><td>且<strong>问</strong>,此事<strong>有</strong>还<strong>无</strong></td></tr><tr><td>0次或无数次</td><td>*</td><td>宇宙洪荒,<strong>辰宿</strong>列张：宇宙伊始，从无到有，最后星宿布满星空</td></tr><tr><td>1次或无数次</td><td>+</td><td><strong>一加</strong>, +1</td></tr><tr><td>特定次数</td><td>{x}, {min, max}</td><td>可以想象成一个数轴，从一个点，到一个射线再到线段。min和max分别表示了左闭右闭区间的左界和右界</td></tr></tbody></table><h1 id="位置边界"><a href="#位置边界" class="headerlink" title="位置边界"></a>位置边界</h1><p>上面我们把字符的匹配都介绍完了，接着我们还需要位置边界的匹配。在长文本字符串查找过程中，我们常常需要限制查询的位置。比如我只想在单词的开头结尾查找。</p><h2 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h2><p>单词是构成句子和文章的基本单位，一个常见的使用场景是把文章或句子中的特定单词找出来。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">The cat scattered his food <span class="hljs-keyword">all</span> <span class="hljs-keyword">over</span> the room.<br></code></pre></td></tr></table></figure><p>我想找到<code>cat</code>这个单词，但是如果只是使用<code>/cat/</code>这个正则，就会同时匹配到<code>cat</code>和<code>scattered</code>这两处文本。这时候我们就需要使用边界正则表达式<code>\b</code>，其中b是boundary的首字母。在正则引擎里它其实匹配的是能构成单词的字符(\w)和不能构成单词的字符(\W)中间的那个位置。</p><p>上面的例子改写成<code>/\bcat\b/</code>这样就能匹配到<code>cat</code>这个单词了。</p><h2 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h2><p>匹配完单词，我们再来看一下一整个字符串的边界怎么匹配。元字符<code>^</code>用来匹配字符串的开头。而元字符<code>$</code>用来匹配字符串的末尾。注意的是在长文本里，如果要排除换行符的干扰，我们要使用多行模式。试着匹配<code>I am scq000</code>这个句子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> am scq000.<br><span class="hljs-selector-tag">I</span> am scq000.<br><span class="hljs-selector-tag">I</span> am scq000.<br></code></pre></td></tr></table></figure><p>我们可以使用<code>/^I am scq000\.$/m</code>这样的正则表达式，其实m是multiple line的首字母。正则里面的模式除了m外比较常用的还有i和g。前者的意思是忽略大小写，后者的意思是找到所有符合的匹配。</p><p>最后，总结一下：</p><table><thead><tr><th>边界和标志</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>单词边界</td><td>\b</td><td><strong>b</strong>oundary</td></tr><tr><td>非单词边界</td><td>\B</td><td><strong>not</strong> <strong>b</strong>oundary</td></tr><tr><td>字符串开头</td><td>^</td><td>小<strong>头尖尖</strong>那么大个</td></tr><tr><td>字符串结尾</td><td>$</td><td><strong>终结</strong>者，美国科幻电影，美元符$</td></tr><tr><td>多行模式</td><td>m标志</td><td><strong>m</strong>ultiple of lines</td></tr><tr><td>忽略大小写</td><td>i标志</td><td><strong>i</strong>gnore case, case-<strong>i</strong>nsensitive</td></tr><tr><td>全局模式</td><td>g标志</td><td><strong>g</strong>lobal</td></tr></tbody></table><h1 id="子表达式"><a href="#子表达式" class="headerlink" title="子表达式"></a>子表达式</h1><p>字符匹配我们介绍的差不多了，更加高级的用法就得用到子表达式了。通过嵌套递归和自身引用可以让正则发挥更强大的功能。</p><p>从简单到复杂的正则表达式演变通常要采用<strong>分组、回溯引用和逻辑处理</strong>的思想。利用这三种规则，可以推演出无限复杂的正则表达式。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>其中分组体现在：所有以<code>(</code>和<code>)</code>元字符所包含的正则表达式被分为一组，每一个分组都是一个<strong>子表达式</strong>，它也是构成高级正则表达式的基础。如果只是使用简单的<code>(regex)</code>匹配语法本质上和不分组是一样的，如果要发挥它强大的作用，往往要结合回溯引用的方式。</p><h2 id="回溯引用"><a href="#回溯引用" class="headerlink" title="回溯引用"></a>回溯引用</h2><p>所谓回溯引用（backreference）指的是模式的后面部分引用前面已经匹配到的子字符串。你可以把它想象成是变量，回溯引用的语法像<code>\1</code>,<code>\2</code>,….,其中<code>\1</code>表示引用的第一个子表达式，<code>\2</code>表示引用的第二个子表达式，以此类推。而<code>\0</code>则表示整个表达式。</p><p>假设现在要在下面这个文本里匹配两个连续相同的单词，你要怎么做呢？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Hello what what <span class="hljs-keyword">is</span> the first thing, <span class="hljs-keyword">and</span> I am am scq000.<br></code></pre></td></tr></table></figure><p>利用回溯引用，我们可以很容易地写出<code>\b(\w+)\s\1</code>这样的正则。</p><p>回溯引用在替换字符串中十分常用，语法上有些许区别，用<code>$1</code>,<code>$2</code>…来引用要被替换的字符串。下面以js代码作演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abc abc 123&#x27;</span>;<br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(ab)c/g</span>,<span class="hljs-string">&#x27;$1g&#x27;</span>);<br><span class="hljs-comment">// 得到结果 &#x27;abg abg 123&#x27;</span><br></code></pre></td></tr></table></figure><p>如果我们不想子表达式被引用，可以使用<strong>非捕获</strong>正则<code>(?:regex)</code>这样就可以避免浪费内存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;scq000&#x27;</span>.<br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(scq00)(?:0)/</span>, <span class="hljs-string">&#x27;$1,$2&#x27;</span>)<br><span class="hljs-comment">// 返回scq00,$2</span><br><span class="hljs-comment">// 由于使用了非捕获正则，所以第二个引用没有值，这里直接替换为$2</span><br></code></pre></td></tr></table></figure><p>有时，我们需要限制回溯引用的适用范围。那么通过前向查找和后向查找就可以达到这个目的。</p><h3 id="前向查找"><a href="#前向查找" class="headerlink" title="前向查找"></a>前向查找</h3><p>前向查找(lookahead)是用来限制后缀的。凡是以<code>(?=regex)</code>包含的子表达式在匹配过程中都会用来限制前面的表达式的匹配。例如<code>happy happily</code>这两个单词，我想获得以<code>happ</code>开头的副词，那么就可以使用<code>happ(?=ily)</code>来匹配。如果我想过滤所有以<code>happ</code>开头的副词，那么也可以采用<strong>负前向查找</strong>的正则<code>happ(?!ily)</code>，就会匹配到<code>happy</code>单词的<code>happ</code>前缀。</p><h3 id="后向查找"><a href="#后向查找" class="headerlink" title="后向查找"></a>后向查找</h3><p>介绍完前向查找，接着我们再来介绍一下它的反向操作：后向查找(lookbehind)。后向查找(lookbehind)是通过指定一个子表达式，然后从符合这个子表达式的位置出发开始查找符合规则的字串。举个简单的例子： <code>apple</code>和<code>people</code>都包含<code>ple</code>这个后缀，那么如果我只想找到<code>apple</code>的<code>ple</code>，该怎么做呢？我们可以通过限制<code>app</code>这个前缀，就能唯一确定<code>ple</code>这个单词了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/(<span class="hljs-string">?&lt;</span>=app)ple/<br></code></pre></td></tr></table></figure><p>其中<code>(?&lt;=regex)</code>的语法就是我们这里要介绍的后向查找。<code>regex</code>指代的子表达式会作为限制项进行匹配，匹配到这个子表达式后，就会继续向<strong>后</strong>查找。另外一种限制匹配是利用<code>(?&lt;!regex)</code> 语法，这里称为<strong>负后向查找</strong>。与正前向查找不同的是，被指定的子表达式不能被匹配到。于是，在上面的例子中，如果想要查找<code>apple</code>的<code>ple</code>也可以这么写成<code>/(?&lt;!peo)ple</code>。</p><p>需要注意的，不是每种正则实现都支持后向查找。在javascript中是不支持的，所以如果有用到后向查找的情况，有一个思路是将字符串进行翻转，然后再使用前向查找，作完处理后再翻转回来。看一个简单的例子：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">// 比如我想替换apple的ple为ply<br>var str = <span class="hljs-string">&#x27;apple people&#x27;</span>;<br>str.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-keyword">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-regexp">/elp(?=pa)/</span>, <span class="hljs-string">&#x27;ylp&#x27;</span>).<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-keyword">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>最后回顾一下这部分内容：</p><table><thead><tr><th>回溯查找</th><th>正则</th><th>记忆方式</th></tr></thead><tbody><tr><td>引用</td><td>\0,\1,\2 和 $0, $1, $2</td><td>转义+数字</td></tr><tr><td>非捕获组</td><td>(?:)</td><td>引用表达式(()), 本身不被消费(?),引用(:)</td></tr><tr><td>前向查找</td><td>(?&#x3D;)</td><td>引用子表达式(())，本身不被消费(?), 正向的查找(&#x3D;)</td></tr><tr><td>前向负查找</td><td>(?!)</td><td>引用子表达式(())，本身不被消费(?), 负向的查找(!)</td></tr><tr><td>后向查找</td><td>(?&lt;&#x3D;)</td><td>引用子表达式(())，本身不被消费(?), 后向的(&lt;，开口往后)，正的查找(&#x3D;)</td></tr><tr><td>后向负查找</td><td>(?&lt;!)</td><td>引用子表达式(())，本身不被消费(?), 后向的(&lt;，开口往后)，负的查找(!)</td></tr></tbody></table><h2 id="逻辑处理"><a href="#逻辑处理" class="headerlink" title="逻辑处理"></a>逻辑处理</h2><p>计算机科学就是一门包含逻辑的科学。让我们回忆一下编程语言当中用到的三种逻辑关系，与或非。</p><p>在正则里面，默认的正则规则都是<strong>与</strong>的关系所以这里不讨论。</p><p>而<strong>非</strong>关系，分为两种情况：一种是字符匹配，另一种是子表达式匹配。在字符匹配的时候，需要使用<code>^</code>这个元字符。在这里要着重记忆一下：<strong>只有在<code>[</code>和<code>]</code>内部使用的<code>^</code>才表示非的关系</strong>。子表达式匹配的非关系就要用到前面介绍的前向负查找子表达式<code>(?!regex)</code>或后向负查找子表达式<code>(?&lt;!regex)</code>。</p><p>或关系，通常给子表达式进行归类使用。比如，我同时匹配a,b两种情况就可以使用<code>(a|b)</code>这样的子表达式。</p><table><thead><tr><th>逻辑关系</th><th>正则元字符</th></tr></thead><tbody><tr><td>与</td><td>无</td></tr><tr><td>非</td><td>[^regex]和!</td></tr><tr><td>或</td><td>|</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于正则来说，符号之抽象往往让很多程序员却步。针对不好记忆的特点，我通过分类和联想的方式努力让其变得有意义。我们先从一对一的单字符，再到多对多的子字符串介绍，然后通过分组、回溯引用和逻辑处理的方式来构建高级的正则表达式。</p><p>转至 <a href="https://juejin.cn/post/6844903845227659271">正则表达式不要背</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>reg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS的四种异步解决方案</title>
    <link href="/2022/10/10/jsAsync/"/>
    <url>/2022/10/10/jsAsync/</url>
    
    <content type="html"><![CDATA[<h3 id="同步-amp-异步的概念"><a href="#同步-amp-异步的概念" class="headerlink" title="同步&amp;异步的概念"></a>同步&amp;异步的概念</h3><p>在讲这四种异步方案之前，我们先来明确一下同步和异步的概念：</p><p>所谓<strong>同步(synchronization)<strong>，简单来说，就是</strong>顺序执行</strong>，指的是同一时间只能做一件事情，只有目前正在执行的事情做完之后，才能做下一件事情。 比如咱们去火车站买票，假设窗口只有1个，那么同一时间只能处理1个人的购票业务，其余的需要进行排队。这种one by one的动作就是同步。 <strong>同步操作的优点</strong>在于做任何事情都是依次执行，井然有序，不会存在大家同时抢一个资源的问题。 <strong>同步操作的缺点</strong>在于<strong>会阻塞后续代码的执行</strong>。如果当前执行的任务需要花费很长的时间，那么后面的程序就只能一直等待。从而影响效率，对应到前端页面的展示来说，有可能会造成页面渲染的阻塞，大大影响用户体验。</p><p>所谓<strong>异步(Asynchronization)<strong>，指的是当前代码的执行不影响后面代码的执行。当程序运行到异步的代码时，会将该异步的代码作为任务放进任务队列，而不是推入主线程的调用栈。等主线程执行完之后，再去任务队列里执行对应的任务即可。 因此，</strong>异步操作的优点就是</strong>：<strong>不会阻塞后续代码的执行</strong>。</p><h3 id="js中异步的应用场景"><a href="#js中异步的应用场景" class="headerlink" title="js中异步的应用场景"></a>js中异步的应用场景</h3><p>开篇讲了同步和异步的概念，那么在JS中异步的应用场景有哪些呢？</p><ul><li>定时任务：setTimeout、setInterval</li><li>网络请求：ajax请求、动态创建img标签的加载</li><li>事件监听器：addEventListener</li></ul><h3 id="实现异步的四种方法"><a href="#实现异步的四种方法" class="headerlink" title="实现异步的四种方法"></a>实现异步的四种方法</h3><p>对于setTimeout、setInterval、addEventListener这种异步场景，不需要我们手动实现异步，直接调用即可。 但是对于ajax请求、node.js中操作数据库这种异步，就需要我们自己来实现了~</p><h4 id="1、-回调函数"><a href="#1、-回调函数" class="headerlink" title="1、 回调函数"></a>1、 回调函数</h4><p>在微任务队列出现之前，JS实现异步的主要方式就是通过回调函数。 以一个简易版的Ajax请求为例，代码结构如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">obj</span>)&#123;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">default</span> = &#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;...&#x27;</span>,<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">async</span>:<span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>    &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        defaultParam[key] = obj[key];<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> xhr;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>        xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);<br>    &#125;<br>    <br>    xhr.<span class="hljs-title function_">open</span>(defaultParam.<span class="hljs-property">type</span>, defaultParam.<span class="hljs-property">url</span>+<span class="hljs-string">&#x27;?&#x27;</span>+dataStr, defaultParam.<span class="hljs-property">async</span>);<br>    xhr.<span class="hljs-title function_">send</span>();<br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br>                <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>                <span class="hljs-comment">// 在此处调用回调函数</span><br>                defaultParam.<span class="hljs-title function_">success</span>(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们在业务代码里可以这样调用ajax请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ajax</span>(&#123;<br>   <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;#&#x27;</span>,<br>   <span class="hljs-attr">type</span>:<span class="hljs-variable constant_">GET</span>,<br>   <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">// 回调函数里就是对请求结果的处理</span><br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>ajax的success方法就是一个回调函数，回调函数中执行的是我们请求成功之后要做的进一步操作。 这样就初步实现了异步，但是回调函数有一个非常严重的缺点，那就是<strong>回调地狱</strong>的问题。 大家可以试想一下，如果我们在回调函数里再发起一个ajax请求呢？那岂不是要在success函数里继续写一个ajax请求？那如果需要多级嵌套发起ajax请求呢？岂不是需要多级嵌套？如果嵌套的层级很深的话，我们的代码结构可能就会变成这样： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e467d65234bf4de995ab7efa6bd0fd86~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="回调地狱示意图"> 因此，为了解决回调地狱的问题，提出了Promise、async&#x2F;await、generator的概念。</p><h4 id="2、Promise"><a href="#2、Promise" class="headerlink" title="2、Promise"></a>2、Promise</h4><p>Promise作为典型的微任务之一，它的出现可以使JS达到异步执行的效果。 一个Promise函数的结构如下列代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;);<br>promise<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`执行resolve,参数是<span class="hljs-subst">$&#123;arg&#125;</span>`</span>) &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`执行reject,参数是<span class="hljs-subst">$&#123;arg&#125;</span>`</span>) &#125;)<br>    .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;结束promise&#x27;</span>) &#125;);<br></code></pre></td></tr></table></figure><p>如果，我们需要嵌套执行异步代码，相比于回调函数来说，Promise的执行方式如下列代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>&#125;);<br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    <span class="hljs-keyword">return</span> value * <span class="hljs-number">2</span>;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    <span class="hljs-keyword">return</span> value * <span class="hljs-number">2</span>;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;);<br></code></pre></td></tr></table></figure><p>即，通过then来实现多级嵌套(<strong>链式调用</strong>)，这看起来是不是就比回调函数舒服多了~</p><p>每个Promise都会经历的生命周期是：</p><ul><li>进行中（pending） - 此时代码执行尚未结束，所以也叫未处理的（unsettled）</li><li>已处理（settled）   - 异步代码已执行结束 已处理的代码会进入两种状态中的一种：<ul><li>已完成（fulfilled） - 表明异步代码执行成功，由resolve()触发</li><li>已拒绝（rejected）- 遇到错误，异步代码执行失败 ，由reject()触发</li></ul></li></ul><p>因此，pending，fulfilled, rejected就是Promise中的三种状态啦~ 大家一定要牢记，在Promise中，要么包含resolve()来表示Promise的状态为fulfilled,要么包含reject()来表示Promise的状态为rejected。 不然我们的Promise就会一直处于pending的状态，直至程序崩溃…</p><p>除此之外，Promise不仅很好的解决了链式调用的问题，它还有很多神奇的操作呢：</p><ul><li>**Promise.all(promises)**：接收一个包含多个Promise对象的数组，等待所有都完成时，返回存放它们结果的数组。如果任一被拒绝，则立即抛出错误，其他已完成的结果会被忽略</li><li><strong>Promise.allSettled(promises)</strong>: 接收一个包含多个Promise对象的数组，等待所有都已完成或者已拒绝时，返回存放它们结果对象的数组。每个结果对象的结构为{status:’fulfilled’ &#x2F;&#x2F; 或 ‘rejected’, value &#x2F;&#x2F; 或reason}</li><li><strong>Promise.race(promises)</strong>: 接收一个包含多个Promise对象的数组，等待第一个有结果（完成&#x2F;拒绝）的Promise，并把其result&#x2F;error作为结果返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPromises</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>((<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>), <span class="hljs-number">1000</span>))),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>((<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;2&#x27;</span>)), <span class="hljs-number">2000</span>))),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>((<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>), <span class="hljs-number">3000</span>))),<br>    ];<br>&#125;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<span class="hljs-title function_">getPromises</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(<span class="hljs-title function_">getPromises</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>(<span class="hljs-title function_">getPromises</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br></code></pre></td></tr></table></figure><p>打印结果如下：<br> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deb4f7993f4f4280b388b861f6eb9c2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60e6b6e792de4b218071b160e78198df~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c85c530253b44cdb65dbea0114fcf5a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><h4 id="3、Generator"><a href="#3、Generator" class="headerlink" title="3、Generator"></a>3、Generator</h4><p>Generator是ES6提出的一种异步编程的方案。因为手动创建一个iterator十分麻烦，因此ES6推出了generator，用于更方便的创建iterator。也就是说，Generator就是一个返回值为iterator对象的函数。<br> 在讲Generator之前，我们先来看看iterator是什么：<br> <strong>iterator是什么？</strong><br> <strong>iterator中文名叫迭代器。它为js中各种不同的数据结构(Object、Array、Set、Map)提供统一的访问机制。任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</strong> 因此iterator也是一种对象，不过相比于普通对象来说，它有着专为迭代而设计的接口。</p><p><strong>iterator 的作用：</strong></p><ul><li>为各种数据结构，提供一个统一的、简便的访问接口；</li><li>使得数据结构的成员能够按某种次序排列；</li><li>ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费</li></ul><p><strong>iterator的结构：</strong> 它有<strong>next</strong>方法，该方法返回一个包含<strong>value</strong>和<strong>done</strong>两个属性的对象（我们假设叫result）。<strong>value</strong>是迭代的值，后者是表明迭代是否完成的标志。true表示迭代完成，false表示没有。iterator内部有指向迭代位置的指针，每次调用<strong>next</strong>，自动移动指针并返回相应的result。</p><p>原生具备iterator接口的数据结构如下：</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数里的arguments对象</li><li>NodeList对象 这些数据结构都有一个Symbol.iterator属性，可以直接通过这个属性来直接创建一个迭代器。 也就是说，Symbol.iterator属性只是一个用来创建迭代器的接口，而不是一个迭代器，因为它不含遍历的部分。<br> 使用Symbol.iterator接口生成iterator迭代器来遍历数组的过程为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">let</span> iter = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><br>iter.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span><br>iter.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span><br>iter.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span><br>iter.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><p><strong>for … of的循环内部实现机制其实就是iterator，它首先调用被遍历集合对象的 Symbol.iterator 方法，该方法返回一个迭代器对象，迭代器对象是可以拥有.next()方法的任何对象，然后，在 for … of 的每次循环中，都将调用该迭代器对象上的 .next 方法。然后使用for i of打印出来的i也就是调用.next方法后得到的对象上的value属性。</strong></p><p>对于原生不具备iterator接口的数据结构，比如Object，我们可以采用自定义的方式来创建一个遍历器。</p><p>比如，我们可以自定义一个iterator来遍历对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;world&quot;</span>&#125;;<br><span class="hljs-comment">// 自定义迭代器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createIterator</span>(<span class="hljs-params">items</span>) &#123;<br>    <span class="hljs-keyword">let</span> keyArr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(items);<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">let</span> done = (i &gt;= keyArr.<span class="hljs-property">length</span>);<br>            <span class="hljs-keyword">let</span> value = !done ? items[keyArr[i++]] : <span class="hljs-literal">undefined</span>;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">value</span>: value,<br>                <span class="hljs-attr">done</span>: done,<br>            &#125;;<br>        &#125;<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">createIterator</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &quot;&#123; value: &#x27;hello&#x27;, done: false &#125;&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());  <span class="hljs-comment">// &quot;&#123; value: &#x27;world&#x27;, done: false &#125;&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());  <span class="hljs-comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>接下来，我们来聊聊Generator:</strong><br> 我们通过一个例子来看看Gnerator的特征：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">createIterator</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-comment">// generators可以像正常函数一样被调用，不同的是会返回一个 iterator</span><br><span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">createIterator</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>Generator 函数是 ES6 提供的一种异步编程解决方案。形式上，Generator 函数是一个普通函数，但是有两个特征:</p><ul><li>function关键字与函数名之间有一个星号</li><li>函数体内部使用yield语句，定义不同的内部状态</li></ul><p>Generator函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用Generator函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是遍历器对象（<strong>Iterator Object</strong>）</p><p>打印看看Generator函数返回值的内容： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c5d88ad317c4ede817c1b56ffb10a40~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"> 发现generator函数的返回值的原型链上确实有iterator对象该有的next，<strong>这充分说明了generator的返回值是一个iterator</strong>。除此之外还有函数该有的return方法和throw方法。</p><p>在普通函数中，我们想要一个函数最终的执行结果，一般都是return出来，或者以return作为结束函数的标准。运行函数时也不能被打断，期间也不能从外部再传入值到函数体内。 但在generator中，就打破了这几点，所以generator和普通的函数完全不同。 当以function*的方式声明了一个Generator生成器时，内部是可以有许多状态的，以yield进行断点间隔。期间我们执行调用这个生成的Generator,他会返回一个遍历器对象，用这个对象上的方法，实现获得一个yield后面输出的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">generator</span>();<br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123;value: 1, done: false&#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123;value: 2, done: false&#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br></code></pre></td></tr></table></figure><p><strong>yield和return的区别：</strong></p><ul><li>都能返回紧跟在语句后面的那个表达式的值</li><li>yield相比于return来说，更像是一个断点。遇到yield，函数暂停执行，下一次再从该位置继续向后执行，而return语句不具备位置记忆的功能。</li><li>一个函数里面，只能执行一个return语句，但是可以执行多次yield表达式。</li><li>正常函数只能返回一个值，因为只能执行一次return；Generator 函数可以返回一系列的值，因为可以有任意多个yield</li></ul><p>语法注意点：</p><ul><li>yield表达式只能用在 Generator 函数里面</li><li>yield表达式如果用在另一个表达式之中，必须放在圆括号里面</li><li>yield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。</li><li>如果 return 语句后面还有 yield 表达式，那么后面的 yield 完全不生效</li></ul><p><strong>使用Generator的其余注意事项：</strong></p><ul><li>需要注意的是，yield 不能跨函数。并且yield需要和*配套使用，别处使用无效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">createIterator</span>(<span class="hljs-params">items</span>) &#123;<br>  items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-comment">// 语法错误</span><br>    <span class="hljs-keyword">yield</span> item + <span class="hljs-number">1</span>;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>箭头函数不能用做 generator</li></ul><p><strong>讲了这么多，那么Generator到底有什么用呢？</strong></p><ul><li>因为Generator可以在执行过程中多次返回，所以它看上去就像一个可以记住执行状态的函数，利用这一点，写一个generator就可以实现需要用面向对象才能实现的功能。</li><li>Generator还有另一个巨大的好处，就是把异步回调代码变成“同步”代码。这个在ajax请求中很有用，避免了回调地狱.</li></ul><h4 id="4、-async-x2F-await"><a href="#4、-async-x2F-await" class="headerlink" title="4、 async&#x2F;await"></a>4、 async&#x2F;await</h4><p>最后我们来讲讲async&#x2F;await,终于讲到这儿了！！！<br> async&#x2F;await是ES7提出的关于异步的终极解决方案。我看网上关于async&#x2F;await是谁的语法糖这块有两个版本：</p><ul><li>第一个版本说async&#x2F;await是Generator的语法糖</li><li>第二个版本说async&#x2F;await是Promise的语法糖</li></ul><p>其实，这两种说法都没有错。<br> <strong>关于async&#x2F;await是Generator的语法糖：</strong> 所谓Generator语法糖，表明的就是aysnc&#x2F;await实现的就是generator实现的功能。但是async&#x2F;await比generator要好用。因为generator执行yield设下的断点采用的方式就是不断的调用iterator方法，这是个手动调用的过程。针对generator的这个缺点，后面提出了co这个库函数来自动执行next，相比于之前的方案，这种方式确实有了进步，但是仍然麻烦。而async配合await得到的就是断点执行后的结果。因此async&#x2F;await比generator使用更普遍。</p><p><strong>总结下来，async函数对 Generator函数的改进，主要体现在以下三点:</strong></p><ul><li>内置执行器：Generator函数的执行必须靠执行器，因为不能一次性执行完成，所以之后才有了开源的 co函数库。但是，async函数和正常的函数一样执行，也不用 co函数库，也不用使用 next方法，而 async函数自带执行器，会自动执行。</li><li>适用性更好：co函数库有条件约束，yield命令后面只能是 Thunk函数或 Promise对象，但是 async函数的 await关键词后面，可以不受约束。</li><li>可读性更好：async和 await，比起使用 *号和 yield，语义更清晰明了。</li></ul><p><strong>关于async&#x2F;await是Promise的语法糖：</strong> 如果不使用async&#x2F;await的话，Promise就需要通过链式调用来依次执行then之后的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">n</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <br>   <span class="hljs-title function_">resolve</span>(n + <span class="hljs-number">1</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">adder</span>(<span class="hljs-params">a, b</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <br>   <span class="hljs-title function_">resolve</span>(a + b);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">a</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <br>   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(a), <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">// 链式调用写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">callAll</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">counter</span>(<span class="hljs-number">1</span>)<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> <span class="hljs-title function_">adder</span>(val, <span class="hljs-number">3</span>))<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> <span class="hljs-title function_">delay</span>(val))<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br>&#125;<br><span class="hljs-title function_">callAll</span>();<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><p>虽然相比于回调地狱来说，链式调用确实顺眼多了。但是其呈现仍然略繁琐了一些。 而<strong>async&#x2F;await的出现，就使得我们可以通过同步代码来达到异步的效果</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">callAll</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">const</span> count = <span class="hljs-keyword">await</span> <span class="hljs-title function_">counter</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">await</span> <span class="hljs-title function_">adder</span>(count, <span class="hljs-number">3</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(sum));<br>&#125;<br><span class="hljs-title function_">callAll</span>();<span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>由此可见，Promise搭配async&#x2F;await的使用才是正解！</p><p><strong>总结</strong></p><ul><li>promise让异步执行看起来更清晰明了，通过then让异步执行结果分离出来。</li><li>async&#x2F;await其实是基于Promise的。async函数其实是把promise包装了一下。使用async函数可以让代码简洁很多，不需要promise一样需要些then，不需要写匿名函数处理promise的resolve值，也不需要定义多余的data变量，还避免了嵌套代码。</li><li>async函数是Generator函数的语法糖。async函数的返回值是 promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。同时，我们还可以用await来替代then方法指定下一步的操作。</li><li>感觉Promise+async的操作最为常见。因为Generator的常用功能可以直接由async来体现呀~</li></ul><p>作者：DoubleSweet0824<br>链接：<a href="https://juejin.cn/post/7082753409060716574">https://juejin.cn/post/7082753409060716574</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务端消息推送方式</title>
    <link href="/2022/08/14/webServerPush/"/>
    <url>/2022/08/14/webServerPush/</url>
    
    <content type="html"><![CDATA[<h2 id="服务端向web前端推送消息常用方式"><a href="#服务端向web前端推送消息常用方式" class="headerlink" title="服务端向web前端推送消息常用方式"></a>服务端向web前端推送消息常用方式</h2><h3 id="问题出现场景"><a href="#问题出现场景" class="headerlink" title="问题出现场景"></a>问题出现场景</h3><ul><li>面试官向你提问，说说如何实现服务端向web前端推送数据？😂</li><li>实际开发中当前端页面在挂起状态，这时候服务端推送了一条消息需要前端展示（单向推送）</li><li>web页面实时聊天功能（双向推送）</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>主要写了5种方案，分别介绍下实现以及运用场景</p><blockquote><ol><li>轮询（短轮询）<br>这是最简单直观的方法，就是每隔一段时间发起一个请求到后端询问是否有新信息。至于为什么又叫短轮询，其是相对于后续要说的长轮询来对比的。</li></ol></blockquote><p>前端写法只要设置一个setTimeout来定时请求就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 缓存前端已经获取的最新id</span><br><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">poll</span>(<span class="hljs-params"></span>) &#123;<br>  $.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/polling&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123; id &#125;,<br>  &#125;).<span class="hljs-title function_">done</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    id += res.<span class="hljs-property">length</span>;<br>  &#125;).<span class="hljs-title function_">always</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 10s后再次请求</span><br>    <span class="hljs-built_in">setTimeout</span>(poll, <span class="hljs-number">10000</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-title function_">poll</span>();<br></code></pre></td></tr></table></figure><p>后端写法，根据前端给到的id，看看有没有新消息，有就返回，没有就返回空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> id = <span class="hljs-built_in">parseInt</span>(query.<span class="hljs-property">id</span> || <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">10</span>) || <span class="hljs-number">0</span>;<br>res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;&#x27;</span> &#125;);<br>res.<span class="hljs-title function_">end</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(datas.<span class="hljs-title function_">slice</span>(id)));<br></code></pre></td></tr></table></figure><p>这种方式不需要后端实现消息推送改造，只需要前端定时请求后端接口其实时性与请求频率成正相关，但是当请求频率上来了，性能浪费也就越高，毕竟可能大部分请求都是无意义的。</p><blockquote><ol start="2"><li>长轮询<br>这里的长轮询相对前面的轮询来说，算是一种优化。具体就是前端发起请求到后端，后端不直接返回，而是等待有新信息时再返回。所以这样发起的一个请求，可能需要很长的时间才能等到返回，故而叫做长轮询。</li></ol></blockquote><p>其前端代码基本和短轮询一致，只不过把请求的超时时间设置较长（比如1分钟），然后无论请求成功或失败，马上再次发起请求即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">poll</span>(<span class="hljs-params"></span>) &#123;<br>  $.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/long-polling&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123; id &#125;,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>, <span class="hljs-comment">// 请求的超时时间设置较长</span><br>  &#125;).<span class="hljs-title function_">done</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    id += res.<span class="hljs-property">length</span><br>  &#125;).<span class="hljs-title function_">always</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(poll, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-title function_">poll</span>()<br></code></pre></td></tr></table></figure><p>后端写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> id = <span class="hljs-built_in">parseInt</span>(query.<span class="hljs-property">id</span> || <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">10</span>) || <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> cbk = <span class="hljs-string">&#x27;long-polling&#x27;</span>;<br><span class="hljs-keyword">delete</span> callbacks[cbk];<br><span class="hljs-keyword">const</span> data = datas.<span class="hljs-title function_">slice</span>(id);<br>res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span> &#125;);<br><span class="hljs-comment">// 发起请求时，正好有新消息就返回</span><br><span class="hljs-keyword">if</span> (data.<span class="hljs-property">length</span>) &#123;<br> <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">end</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;<br><span class="hljs-comment">// 注册新消息回调</span><br>callbacks[cbk] = <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br> res.<span class="hljs-title function_">end</span>(d);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样，相对于短轮询，少了很多无意义的请求，而且消息的实时性也非常好。缺点就是当服务端有异常时，会导致长轮询短时间内不断发起请求，可能让服务端承受更大的压力，所以两次长轮询之间最好有一定间隔，或者异常检测机制。</p><blockquote><ol start="3"><li>SSE（Server-sent events）<br>前面提到的轮询、长轮询都是一问一答式的，一次请求，无法推送多次消息到前端。而SSE就厉害了，一次请求，N次推送。<br>其原理可以理解为下载一个巨大的文件，文件的内容分块传给前端，每块就是一次消息推送。</li></ol></blockquote><p>前端写法，有专门的EventSource来接收，使用起来很方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> es = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;/api/sse&#x27;</span>)<br>es.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>  &#125;<br>&#125;<br>es.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">pushStatus</span>(s, <span class="hljs-string">&#x27;等待消息中&#x27;</span>, <span class="hljs-string">&#x27;success&#x27;</span>)<br>&#125;<br>es.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">pushStatus</span>(s, <span class="hljs-string">&#x27;连接错误&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>后端写法，核心在于Content-Type: text&#x2F;event-stream，这要让前端知道这是SSE，还有就是传输信息的格式比较特别一点，详细的可以看 MDN（ <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events</a> ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>  <span class="hljs-comment">// 这个是核心</span><br>  <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/event-stream&#x27;</span>,<br>  <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>&#125;);<br><span class="hljs-comment">// 把缓存的信息推送给前端</span><br>res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`data: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(datas)&#125;</span>\n\n`</span>);<br><span class="hljs-comment">// 注册新消息回调</span><br>callbacks[cbk] = <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`data: <span class="hljs-subst">$&#123;d&#125;</span>\n\n`</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>SSE还支持自动重连！服务器短时间异常，恢复之后，无需额外代码，SSE就自动重连上了。</p><blockquote><ol start="4"><li>WebSocket<br>WebSocket可以一次连接，双向推送，而SSE只能从服务端推送到前端。从这个角度来看，用WebSocket来单做服务端推送，有点大材小用了。</li></ol></blockquote><p>前端写法与SSE类似，十分简单，只不过请求链接为ws:&#x2F;&#x2F;或者wss:&#x2F;&#x2F;开头（相当于http:&#x2F;&#x2F;和https:&#x2F;&#x2F;）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:3000/ws&#x27;</span>);<br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> c = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果要用原生Node.js来写WebSocket服务，就会麻烦一些了，一般情况都会使用类似socket.io之类的三方库来降低实现成本。这边也就在网上摘抄了一段代码来简单实现一下<br>后端写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;upgrade&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, socket</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> acceptKey = req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;sec-websocket-key&#x27;</span>];<br>  <span class="hljs-keyword">const</span> hash = <span class="hljs-title function_">generateAcceptValue</span>(acceptKey);<br>  <span class="hljs-comment">// 生成响应头信息</span><br>  <span class="hljs-keyword">const</span> responseHeaders = [ <span class="hljs-string">&#x27;HTTP/1.1 101 Web Socket Protocol Handshake&#x27;</span>, <span class="hljs-string">&#x27;Upgrade: WebSocket&#x27;</span>, <span class="hljs-string">&#x27;Connection: Upgrade&#x27;</span>, <span class="hljs-string">`Sec-WebSocket-Accept: <span class="hljs-subst">$&#123;hash&#125;</span>`</span> ];<br>  <span class="hljs-comment">// 告知前端这是WebSocket协议</span><br>  socket.<span class="hljs-title function_">write</span>(responseHeaders.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span>) + <span class="hljs-string">&#x27;\r\n\r\n&#x27;</span>);<br>  <span class="hljs-comment">// 发送数据</span><br>  socket.<span class="hljs-title function_">write</span>(<span class="hljs-title function_">constructReply</span>(datas));<br>  callbacks[cbk] = <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>    socket.<span class="hljs-title function_">write</span>(<span class="hljs-title function_">constructReply</span>(d));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Websocket没有像SSE一样有自动重连，这块需要自行实现。一般网页实时聊天之类需要双向推送的，都会使用WebSocket来实现。</p><blockquote><ol start="5"><li>iFrame<br>原理类似使用iFrame加载一个巨大的网页，利用浏览器会一边加载一边解析执行返回的HTML，通过分次返回Script标签来实现消息推送。其实现类似SSE</li></ol></blockquote><p>前端代码很简单，要注册一个回调给iframe使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册给iframe使用的方法</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">change</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;&#125;;<br>$(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;iframe src=&quot;/api/iframe&quot;&gt;&lt;/iframe&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>后端也很简单，有消息的时候返回script标签即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 有推送消息返回缓存信息</span><br>res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`&lt;script&gt;window.parent.change(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(datas)&#125;</span>);&lt;/script&gt;`</span>);<br><span class="hljs-comment">// 注册消息回调</span><br>callbacks[cbk] = <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`&lt;script&gt;window.parent.change(<span class="hljs-subst">$&#123;d&#125;</span>);&lt;/script&gt;`</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>iFrame这种方式缺点没有判断加载异常的情况</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>方案</th><th align="center">实时性</th><th align="center">单次连接</th><th align="center">自动重连</th><th align="center">断线检测</th><th align="center">双向推送</th></tr></thead><tbody><tr><td>短轮询</td><td align="center">❌</td><td align="center">❌</td><td align="center">➖</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td>长轮询</td><td align="center">✅</td><td align="center">❌</td><td align="center">➖</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td>SSE</td><td align="center">✅</td><td align="center">✅</td><td align="center">✅</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td>WebSocket</td><td align="center">✅</td><td align="center">✅</td><td align="center">❌</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td>iFrame</td><td align="center">✅</td><td align="center">✅</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常见用法(包含🌰)</title>
    <link href="/2022/05/19/gitCommand/"/>
    <url>/2022/05/19/gitCommand/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-概念"><a href="#Git-概念" class="headerlink" title="Git 概念"></a>Git 概念</h2><p>Workspace：工作区<br>Index &#x2F; Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库<br><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="Git"></p><h3 id="git-HEAD"><a href="#git-HEAD" class="headerlink" title="git HEAD"></a>git HEAD</h3><p>HEAD 是一个对当前检出记录的符号引用, 也就是指向你正在其基础上进行工作的提交记录。<br>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。<br>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示：<br># HEAD -&gt; main -&gt; C1<br># HEAD 指向 main， main 指向 C1<br># C1 表示具体的某条提交记录 <br>$ git checkout C1<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 如果 HEAD 指向的是一个引用，还可以用 git symbolic-ref HEAD 查看它的指向</span><br>$ git symbolic-<span class="hljs-keyword">ref</span> HEAD<br></code></pre></td></tr></table></figure><h3 id="git-相对引用"><a href="#git-相对引用" class="headerlink" title="git 相对引用"></a>git 相对引用</h3><p>背景：通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 git log 来查查看提交记录的哈希值，通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!<br>使用相对引用的话，你就可以从一个易于记忆的地方（比如 bugFix 分支或 HEAD）开始计算。<br>相对引用非常给力，这里我介绍两个简单的用法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 使用 ^ 向上移动 1 个提交记录</span><br><span class="hljs-comment"># 所以 main^ 相当于“main 的父节点”。</span><br><span class="hljs-comment"># main^^ 是 main 的第二个父节点</span><br><span class="hljs-variable">$ </span>git checkout main^<br><br><span class="hljs-comment"># 使用 ~&lt;num&gt; 向上移动多个提交记录，如 ~3</span><br><span class="hljs-variable">$ </span>git checkout main~<span class="hljs-number">3</span><br><br><span class="hljs-comment"># 你也可以将 HEAD 作为相对引用的参照。下面咱们就用 HEAD 在提交树中向上移动几次。</span><br><span class="hljs-variable">$ </span>git checkout HEAD^<br><br><span class="hljs-comment"># 操作符 ^ 与 ~ 符一样，后面也可以跟一个数字, 但是该操作符后面的数字与 ~ 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</span><br><span class="hljs-comment"># Git 默认选择合并提交的“第一个”父提交，在操作符 ^ 后跟一个数字可以改变这一默认行为。</span><br><span class="hljs-comment"># C0 -&gt; C1 -&gt; C3(main) ｜ C0 -&gt; C2 -&gt; C3(main)</span><br><span class="hljs-variable">$ </span>git checkout main^ (默认指向的是C1而不是C2)<br><span class="hljs-variable">$ </span>git checkout main^<span class="hljs-number">2</span> (默认指向的是C2而不是C1)<br><br><span class="hljs-comment"># 这些操作符还支持链式操作！</span><br><span class="hljs-variable">$ </span>git checkout HEAD~^<span class="hljs-number">2</span>~<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="Git-常用语法"><a href="#Git-常用语法" class="headerlink" title="Git 常用语法"></a>Git 常用语法</h2><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><p>配置 Git 的相关参数。<br>Git 一共有3个配置文件：</p><ol><li>仓库级的配置文件：在仓库的 .git&#x2F;.gitconfig，该配置文件只对所在的仓库有效。</li><li>全局配置文件：Mac 系统在 ~&#x2F;.gitconfig，Windows 系统在 C:\Users&lt;用户名&gt;.gitconfig。</li><li>系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 &#x2F;usr&#x2F;local&#x2F;git）的 etc 文件夹中的 gitconfig。</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 查看配置信息</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;<span class="hljs-params">--local</span> | <span class="hljs-params">--global</span> | <span class="hljs-params">--system</span>&gt; -l<br><br><span class="hljs-comment"># 查看当前生效的配置信息</span><br>$ git config -l<br><br><span class="hljs-comment"># 编辑配置文件</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;<span class="hljs-params">--local</span> | <span class="hljs-params">--global</span> | <span class="hljs-params">--system</span>&gt; -e<br><br><span class="hljs-comment"># 添加配置项</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;<span class="hljs-params">--local</span> | <span class="hljs-params">--global</span> | <span class="hljs-params">--system</span>&gt; <span class="hljs-params">--add</span> &lt;name&gt; &lt;value&gt;<br><br><span class="hljs-comment"># 获取配置项</span><br>$ git config &lt;<span class="hljs-params">--local</span> | <span class="hljs-params">--global</span> | <span class="hljs-params">--system</span>&gt; <span class="hljs-params">--get</span> &lt;name&gt;<br><br><span class="hljs-comment"># 删除配置项</span><br>$ git config &lt;<span class="hljs-params">--local</span> | <span class="hljs-params">--global</span> | <span class="hljs-params">--system</span>&gt; <span class="hljs-params">--unset</span> &lt;name&gt;<br><br><span class="hljs-comment"># 配置提交记录中的用户信息</span><br>$ git config <span class="hljs-params">--global</span> user.name &lt;用户名&gt;<br>$ git config <span class="hljs-params">--global</span> user.email &lt;邮箱地址&gt;<br><br><span class="hljs-comment"># 更改Git缓存区的大小</span><br><span class="hljs-comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span><br><span class="hljs-comment"># 缓存大小单位：B，例如：524288000（500MB）</span><br>$ git config <span class="hljs-params">--global</span> http.postBuffer &lt;缓存大小&gt;<br><br><span class="hljs-comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span><br>$ git config <span class="hljs-params">--global</span> color.ui <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 配置可以缓存密码，默认缓存时间15分钟</span><br>$ git config <span class="hljs-params">--global</span> credential.helper cache<br><br><span class="hljs-comment"># 配置密码的缓存时间</span><br><span class="hljs-comment"># 缓存时间单位：秒</span><br>$ git config <span class="hljs-params">--global</span> credential.helper &#x27;cache <span class="hljs-params">--timeout=</span>&lt;缓存时间&gt;&#x27;<br><br><span class="hljs-comment"># 配置长期存储密码</span><br>$ git config <span class="hljs-params">--global</span> credential.helper store<br></code></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>从远程仓库克隆一个版本库到本地。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span><br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;远程仓库的网址&gt;</span><br><span class="hljs-title"></span><br><span class="hljs-title"># 指定本地仓库的目录</span><br><span class="hljs-title">$</span> git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="hljs-title"></span><br><span class="hljs-title"># -b</span> 指定要克隆的分支，默认是<span class="hljs-literal">master</span>分支<br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;远程仓库的网址&gt; -b</span> <span class="hljs-tag">&lt;分支名称&gt;</span> <span class="hljs-tag">&lt;本地目录&gt;</span><br></code></pre></td></tr></table></figure><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span><br><span class="hljs-variable">$ </span>git init<br></code></pre></td></tr></table></figure><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>查看本地仓库的状态。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 查看本地仓库的状态</span><br><span class="hljs-variable">$ </span>git status<br><br><span class="hljs-comment"># 以简短模式查看本地仓库的状态</span><br><span class="hljs-comment"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span><br><span class="hljs-comment"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span><br><span class="hljs-variable">$ </span>git status -s<br></code></pre></td></tr></table></figure><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>操作远程库。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 列出已经存在的远程仓库</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span><br><br><span class="hljs-comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> -<span class="hljs-string">v</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">--verbose</span><br><br><span class="hljs-comment"># 添加远程仓库</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">add</span> &lt;远程仓库的别名&gt; &lt;远程仓库的<span class="hljs-string">URL</span>地址&gt;<br><br><span class="hljs-comment"># 修改远程仓库的别名</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">rename</span> &lt;原远程仓库的别名&gt; &lt;新的别名&gt;<br><br><span class="hljs-comment"># 删除指定名称的远程仓库</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">remove</span> &lt;远程仓库的别名&gt;<br><br><span class="hljs-comment"># 修改远程仓库的 URL 地址</span><br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> &lt;远程仓库的别名&gt; &lt;新的远程仓库<span class="hljs-string">URL</span>地址&gt;<br><br></code></pre></td></tr></table></figure><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>操作 Git 的分支命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出本地的所有分支，当前所在分支以 <span class="hljs-string">&quot;*&quot;</span> 标出</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出本地的所有分支并显示最后一次提交，当前所在分支以 <span class="hljs-string">&quot;*&quot;</span> 标出</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -v</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建新分支，新的分支基于上一次提交建立</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch &lt;分支名&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改分支名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不指定原分支名称则为当前所在分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制修改分支名称</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除指定的本地分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d &lt;分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制删除指定的本地分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -D &lt;分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制修改分支位置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我使用相对引用最多的就是移动分支。可以直接使用 -f 选项让分支指向另一个提交。将 main 分支强制指向 HEAD 的第 3 级父提交。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -f main HEAD~3</span><br><br></code></pre></td></tr></table></figure><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p>检出命令，用于创建、切换分支等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到已存在的指定分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout &lt;分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并切换到指定的分支，保留所有的提交记录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">等同于 <span class="hljs-string">&quot;git branch&quot;</span> 和 <span class="hljs-string">&quot;git checkout&quot;</span> 两个命令合并</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并切换到指定的分支，删除所有的提交记录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout --orphan &lt;分支名称&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout &lt;文件路径&gt;</span><br></code></pre></td></tr></table></figure><h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h3><p>把已经提交（多个&#x2F;单个）的记录有序的合并到当前分支。关键词：多个&#x2F;有序</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 把已经提交的记录合并到当前分支</span><br><span class="hljs-variable">$ </span>git cherry-pick &lt;commit ID&gt;<br><br><span class="hljs-comment"># 可进行多个提交的抓取 C1 C2 或者 C2 C1 产生的效果完全不一样是有孙旭的提交记录</span><br><span class="hljs-variable">$ </span>git cherry-pick C1 C2<br><span class="hljs-variable">$ </span>git cherry-pick C2 C1<br></code></pre></td></tr></table></figure><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 把指定的文件添加到暂存区中</span><br>$ git <span class="hljs-built_in">add</span> &lt;文件路径&gt;<br><br><span class="hljs-comment"># 添加所有修改、已删除的文件到暂存区中</span><br>$ git <span class="hljs-built_in">add</span> -u [&lt;文件路径&gt;]<br>$ git <span class="hljs-built_in">add</span> --update [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span><br>$ git <span class="hljs-built_in">add</span> -A [&lt;文件路径&gt;]<br>$ git <span class="hljs-built_in">add</span> --all [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span><br>$ git <span class="hljs-built_in">add</span> -i [&lt;文件路径&gt;]<br>$ git <span class="hljs-built_in">add</span> --interactive [&lt;文件路径&gt;]<br></code></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>将暂存区中的文件提交到本地仓库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">把暂存区中的文件提交到本地仓库中并添加描述信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">把所有修改、已删除的文件提交到本地仓库中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不包括未被版本库跟踪的文件，等同于先调用了 <span class="hljs-string">&quot;git add -u&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改上次提交的描述信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit --amend</span><br></code></pre></td></tr></table></figure><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p>git fetch 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。<br>git fetch 完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 origin&#x2F;main)</li></ul><p>git fetch 不会做的事: </p><ul><li>git fetch 并不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。</li></ul><p>理解这一点很重要，因为许多开发人员误以为执行了 git fetch 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是并没有修改你本地的文件。<br>所以, 你可以将 git fetch 的理解为单纯的下载操作。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 将远程仓库所有分支的最新版本全部取回到本地</span><br><span class="hljs-variable">$ </span>git fetch &lt;远程仓库的别名&gt;<br><span class="hljs-variable">$ </span>git fetch origin<br><br><span class="hljs-comment"># 将远程仓库指定分支的最新版本取回到本地</span><br><span class="hljs-variable">$ </span>git fetch &lt;远程主机名&gt; &lt;分支名&gt;<br><span class="hljs-variable">$ </span>git fetch origin <span class="hljs-symbol">pre:</span>pre<br></code></pre></td></tr></table></figure><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>合并分支</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 把指定的分支合并到当前所在的分支下</span><br><span class="hljs-variable">$ </span>git merge &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>比较版本之间的差异。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span><br><br><span class="hljs-comment"># 比较暂存区中的文件和上次提交时的差异</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> <span class="hljs-literal">--cached</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> <span class="hljs-literal">--staged</span><br><br><span class="hljs-comment"># 比较当前文件和上次提交时的差异</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> HEAD<br><br><span class="hljs-comment"># 查看从指定的版本之后改动的内容</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> &lt;commit ID&gt;<br><br><span class="hljs-comment"># 比较两个分支之间的差异</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> &lt;分支名称&gt; &lt;分支名称&gt;<br><br><span class="hljs-comment"># 查看两个分支分开后各自的改动内容</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> &lt;分支名称&gt;...&lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>从远程仓库获取最新版本并合并到本地。<br>首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 从远程仓库获取最新版本。</span><br><span class="hljs-variable">$ </span>git pull<br><br><span class="hljs-comment"># git pull origin foo 相当于：git fetch origin foo; git merge o/foo</span><br><span class="hljs-comment"># git pull origin bar~1:bugFix 相当于：git fetch origin bar~1:bugFix; git merge bugFix</span><br><br></code></pre></td></tr></table></figure><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>把本地仓库的提交推送到远程仓库。远程仓库对应的分支会指向最新的提交，本地的远程分支也会指向最新的提交记录</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># push 参数1</span><br><span class="hljs-comment"># 把本地仓库的分支推送到远程仓库</span><br><span class="hljs-variable">$ </span>git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;<br><span class="hljs-variable">$ </span>git push &lt;remote&gt; &lt;place&gt;<br><span class="hljs-variable">$ </span>git push origin main(本地分支)<br><span class="hljs-comment"># 把这个命令翻译过来就是：</span><br><span class="hljs-comment"># 切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。</span><br><span class="hljs-comment"># 我们通过“place”参数来告诉 Git 提交记录来自于 main, 要推送到远程仓库中的 main。它实际就是要同步的两个仓库的位置。</span><br><span class="hljs-comment"># 需要注意的是，因为我们通过指定参数告诉了 Git 所有它需要的信息, 所以它就忽略了我们所检出的分支的属性！</span><br><br><span class="hljs-comment"># push 参数2</span><br><span class="hljs-comment"># 把本地仓库的分支推送到远程仓库的指定分支</span><br><span class="hljs-variable">$ </span>git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;<span class="hljs-symbol">:&lt;</span>远程分支名&gt;<br><span class="hljs-comment"># 当为 git push 指定 place 参数为 main 时，我们同时指定了提交记录的来源和去向。</span><br><span class="hljs-comment"># 你可能想问 —— 如果来源和去向分支的名称不同呢？比如你想把本地的 foo 分支推送到远程仓库中的 bar 分支。</span><br><span class="hljs-comment"># 当然是可以的啦 :) Git 拥有超强的灵活性（有点过于灵活了）</span><br><span class="hljs-variable">$ </span>git push origin &lt;source&gt;<span class="hljs-symbol">:&lt;destination&gt;</span><br><span class="hljs-comment"># source 可以是任何 Git 能识别的位置：</span><br><span class="hljs-variable">$ </span>git push origin <span class="hljs-title class_">HEAD</span>^<span class="hljs-symbol">:foo</span><br><br><span class="hljs-comment"># 删除指定的远程仓库的分支</span><br><span class="hljs-variable">$ </span>git push &lt;远程仓库的别名&gt; <span class="hljs-symbol">:&lt;</span>远程分支名&gt;<br><span class="hljs-variable">$ </span>git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;<br><span class="hljs-comment"># 为推送当前分支并建立与远程上游的跟踪，使用</span><br><span class="hljs-variable">$ </span>git push --set-upstream &lt;远程仓库别名&gt; &lt;远程分支名&gt;<br><span class="hljs-variable">$ </span>git push --set-upstream origin master<br><span class="hljs-comment"># 强行推送本地记录</span><br><span class="hljs-variable">$ </span>git push -u origin +master<br></code></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>显示提交的记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打印所有的提交记录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印从第一次提交到指定的提交的记录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> &lt;commit ID&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印指定数量的最新提交的记录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -&lt;指定的数量&gt;</span><br></code></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>还原提交记录。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 重置暂存区，但文件不受影响<br># 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件<br># 没有指定 <span class="hljs-keyword">commit</span> ID 则默认为当前 HEAD<br>$ git <span class="hljs-keyword">reset</span> [&lt;文件路径&gt;]<br>$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed [&lt;文件路径&gt;]</span><br><br># <span class="hljs-comment">--mixed 重置索引，但不重置工作树，更改后的文件标记为未提交（add）的状态。默认操作 （git status 是红色的状态）。</span><br>$ git <span class="hljs-keyword">reset</span> &lt;<span class="hljs-keyword">commit</span> ID&gt;<br>$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--mixed &lt;commit ID&gt;</span><br><br># <span class="hljs-comment">--soft 回退后a分支修改的代码被保留并标记为add的状态（git status 是绿色的状态）</span><br># 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;<br>$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft &lt;commit ID&gt;</span><br><br># <span class="hljs-comment">--hard 重置索引和工作树，并且a分支修改的所有文件和中间的提交，没提交的代码都被丢弃了。</span><br>$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard &lt;commit ID&gt;</span><br><br># <span class="hljs-comment">--merge 和--hard类似，只不过如果在执行reset命令之前你有改动一些文件并且未提交，merge会保留你的这些修改，hard则不会。【注：如果你的这些修改add过或commit过，merge和hard都将删除你的提交】</span><br># <span class="hljs-comment">--keep 和--hard类似，执行reset之前改动文件如果是a分支修改了的，会提示你修改了相同的文件，不能合并。如果不是a分支修改的文件，会移除缓存区。git status还是可以看到保持了这些修改。</span><br><br></code></pre></td></tr></table></figure><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 生成一个新的提交来撤销某次提交</span><br><span class="hljs-variable">$ </span>git revert &lt;commit ID&gt;<br></code></pre></td></tr></table></figure><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><p>分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。<br>你可能会问了：有没有什么可以永远指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？<br>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。<br>更难得的是，它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 我们将这个标签命名为 v1，并且明确地让它指向提交记录 C1，如果你不指定提交记录，Git 会用 HEAD 所指向的位置。</span><br>$ git <span class="hljs-keyword">tag</span> v1 C1<br><br><span class="hljs-comment"># 打印所有的标签</span><br>$ git <span class="hljs-keyword">tag</span><br><br><span class="hljs-comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span><br>$ git <span class="hljs-keyword">tag</span> <span class="hljs-variable">&lt;标签名称&gt;</span> [<span class="hljs-variable">&lt;commit ID&gt;</span>]<br><br><span class="hljs-comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span><br>$ git <span class="hljs-keyword">tag</span> -a <span class="hljs-variable">&lt;标签名称&gt;</span> -m <span class="hljs-variable">&lt;标签描述信息&gt;</span> [<span class="hljs-variable">&lt;commit ID&gt;</span>]<br><br><span class="hljs-comment"># 切换到指定的标签</span><br>$ git checkout <span class="hljs-variable">&lt;标签名称&gt;</span><br><br><span class="hljs-comment"># 查看标签的信息</span><br>$ git show <span class="hljs-variable">&lt;标签名称&gt;</span><br><br><span class="hljs-comment"># 删除指定的标签</span><br>$ git <span class="hljs-keyword">tag</span> -d <span class="hljs-variable">&lt;标签名称&gt;</span><br><br><span class="hljs-comment"># 将指定的标签提交到远程仓库</span><br>$ git push <span class="hljs-variable">&lt;远程仓库的别名&gt;</span> <span class="hljs-variable">&lt;标签名称&gt;</span><br><br><span class="hljs-comment"># 将本地所有的标签全部提交到远程仓库</span><br>$ git push <span class="hljs-variable">&lt;远程仓库的别名&gt;</span> –tags<br><span class="hljs-comment"># 强push</span><br>$ git push origin <span class="hljs-variable">&lt;远程分支名&gt;</span> --force<br></code></pre></td></tr></table></figure><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p>重命名文件或者文件夹。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 重命名指定的文件或者文件夹</span><br>$ git mv &lt;源文件<span class="hljs-regexp">/文件夹&gt; &lt;目标文件/</span>文件夹&gt;<br></code></pre></td></tr></table></figure><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>删除文件或者文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">rm</span> &lt;文件路径&gt;<br><br><span class="hljs-comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">rm</span> <span class="hljs-literal">-r</span> &lt;文件夹路径&gt;<br><br><span class="hljs-comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">rm</span> <span class="hljs-literal">--cached</span><br></code></pre></td></tr></table></figure><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将当前分支变基到目标分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase &lt;远程分支名&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将某个分支变基到另一个分支上 (将分支b变基到分支a上)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase &lt;分支名a&gt; &lt;分支名b&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase a b</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示继续下一个冲突(git rebase --<span class="hljs-built_in">continue</span> 就相当于 git commit)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase --<span class="hljs-built_in">continue</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示跳过当前冲突</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase --skip</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示退出rebase模式, 回到运行git rebase master命令之前的状态</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase --abort</span><br></code></pre></td></tr></table></figure><h3 id="git-describe"><a href="#git-describe" class="headerlink" title="git describe"></a>git describe</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来描述离你最近的锚点（也就是标签）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># &lt;<span class="hljs-built_in">ref</span>&gt; 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。<br>git describe &lt;<span class="hljs-built_in">ref</span>&gt;<br><br># 它输出的结果是这样的：&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;<br># tag 表示的是离 <span class="hljs-built_in">ref</span> 最近的标签， numCommits 是表示这个 <span class="hljs-built_in">ref</span> 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 <span class="hljs-built_in">ref</span> 所表示的提交记录哈希值的前几位。<br># <span class="hljs-constructor">C0(<span class="hljs-params">v1</span>)</span> -&gt; C1 -&gt; <span class="hljs-constructor">C2(<span class="hljs-params">main</span>)</span><br>git describe main 会输出：v1_2_gC2 <br></code></pre></td></tr></table></figure><h3 id="git-worktree"><a href="#git-worktree" class="headerlink" title="git worktree"></a>git worktree</h3><p>仅需维护一个 repo，又可以同时在多个 branch 上工作，互不影响<br>默认情况下， git init 或 git clone 初始化的 repo，只有一个 worktree，叫做 main worktree<br>在某一个目录下使用 Git 命令，当前目录下要么有 .git 文件夹；要么有 .git 文件，如果只有 .git 文件，里面的内容必须是指向 .git 文件夹的</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"># 常用worktree 命令<br>$ git worktree add <span class="hljs-comment">[-f]</span> <span class="hljs-comment">[--detach]</span> <span class="hljs-comment">[--checkout]</span> <span class="hljs-comment">[--lock]</span> <span class="hljs-comment">[-b &lt;new-branch&gt;]</span> &lt;path&gt; <span class="hljs-comment">[&lt;commit-ish&gt;]</span><br>$ git worktree list <span class="hljs-comment">[--porcelain]</span><br>$ git worktree remove <span class="hljs-comment">[-f]</span> &lt;worktree&gt;<br>$ git worktree prune <span class="hljs-comment">[-n]</span> <span class="hljs-comment">[-v]</span> <span class="hljs-comment">[--expire &lt;expire&gt;]</span><br></code></pre></td></tr></table></figure><ul><li>创建一个worktree<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git worktree add ..<span class="hljs-regexp">/feature/</span>feature2<br></code></pre></td></tr></table></figure>目录结构<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">├── amend-crash-<span class="hljs-built_in">demo</span><br>└── <span class="hljs-built_in">feature</span><br>    └── feature2<br></code></pre></td></tr></table></figure>cd ..&#x2F;feature&#x2F;feature2&#x2F; 会发现，这个分支下并不存在 .git 文件夹，却存在一个 .git 文件，打开文件，内容如下：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gitdir: <span class="hljs-regexp">/Users/</span>rgyb<span class="hljs-regexp">/Documents/</span>projects<span class="hljs-regexp">/amend-crash-demo/</span>.git<span class="hljs-regexp">/worktrees/</span>feature2<br></code></pre></td></tr></table></figure></li><li>git worktree remove<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 删除一个worktree 参数是文件路径 注意路径前不加 <span class="hljs-string">&quot;/&quot;</span><br>git worktree <span class="hljs-built_in">remove</span> <span class="hljs-built_in">feature</span>/feature2<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 假设你创建一个 worktree，并在里面有改动，突然间这个worktree 又不需要了，此刻你按照上述命令是不能删掉了，此时就需要 -f 参数来帮忙了</span><br>git worktree <span class="hljs-built_in">remove</span> -f feature/feature2<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 删除了 worktree，其实在 Git 的文件中，还有很多 administrative 文件是没有用的，为了保持清洁，我们还需要进一步清理</span><br><span class="hljs-comment"># 这个命令就是清洁的兜底操作，可以让我们的工作始终保持整洁</span><br><span class="hljs-attribute">git</span> worktree prune<br></code></pre></td></tr></table></figure></li></ul><h2 id="Git操作场景-🌰"><a href="#Git操作场景-🌰" class="headerlink" title="Git操作场景(🌰)"></a>Git操作场景(🌰)</h2><h3 id="删除掉本地不存在的远程分支"><a href="#删除掉本地不存在的远程分支" class="headerlink" title="删除掉本地不存在的远程分支"></a>删除掉本地不存在的远程分支</h3><p>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch –all 依然会显示该远程分支，可使用下列的命令进行删除</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 使用 pull 命令，添加 -p 参数</span><br><span class="hljs-variable">$ </span>git pull -p<br><br><span class="hljs-comment"># 等同于下面的命令</span><br><span class="hljs-variable">$ </span>git fetch -p<br><span class="hljs-variable">$ </span>git fetch --prune origin<br></code></pre></td></tr></table></figure><h3 id="只提交某次记录"><a href="#只提交某次记录" class="headerlink" title="只提交某次记录"></a>只提交某次记录</h3><p>发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。<br>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！<br>最后就差把 bugFix 分支里的工作合并回 main 分支了。你可以选择通过 fast-forward 快速合并到 main 分支上，但这样的话 main 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</span><br><span class="hljs-variable">$ </span>git rebase -i<br><span class="hljs-variable">$ </span>git cherry-pick <br></code></pre></td></tr></table></figure><h3 id="本地分支合并远端分支"><a href="#本地分支合并远端分支" class="headerlink" title="本地分支合并远端分支"></a>本地分支合并远端分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git cherry-pick o/main</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git rebase o/main</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge o/main</span><br>...<br></code></pre></td></tr></table></figure><h3 id="远程分支代码比本地分支代码新的情况进行提交"><a href="#远程分支代码比本地分支代码新的情况进行提交" class="headerlink" title="远程分支代码比本地分支代码新的情况进行提交"></a>远程分支代码比本地分支代码新的情况进行提交</h3><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。</p><p>这种情况下, git push 就不知道该如何操作了。如果你执行 git push，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？<br>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 push 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式1: rebase</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们用 git fetch 更新了本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 git push 推送到远程仓库。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git fetch; git rebase orgin/main; git push</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式2: merge</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git merge 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们用 git fetch 更新了本地仓库中的远程分支，然后合并了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 git push 把工作推送到远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git fetch; git merge orgin/main; git push</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式3: pull / pull --rebase</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">要敲那么多命令，有没有更简单一点的？前面已经介绍过 git pull 就是 fetch 和 merge 的简写，类似的 git pull --rebase 就是 fetch 和 rebase 的简写！</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git pull --rebase; git push</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git pull; git push</span><br></code></pre></td></tr></table></figure><h3 id="远程跟踪"><a href="#远程跟踪" class="headerlink" title="远程跟踪"></a>远程跟踪</h3><p>自定义远程跟踪分支：你可以让任意分支跟踪 o&#x2F;main, 然后该分支会像 main 分支一样得到隐含的 push 目的地以及 merge 的目标。 这意味着你可以在分支 totallyNotMain 上执行 git push，将工作推送到远程仓库的 main 分支上。<br><strong>需要注意的是 main 并未被更新</strong><br>有两种方法设置这个属性，第一种就是通过远程分支检出一个新的分支，执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1: git checkout -b</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b totallyNotMain o/main</span><br>就可以创建一个名为 totallyNotMain 的分支，它跟踪远程分支 o/main。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2: git branch -u</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -u o/main foo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这样 foo 就会跟踪 o/main 了。如果当前就在 foo 分支上, 还可以省略 foo：</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -u o/main</span><br></code></pre></td></tr></table></figure><h3 id="代码分支迁移到不同仓库"><a href="#代码分支迁移到不同仓库" class="headerlink" title="代码分支迁移到不同仓库"></a>代码分支迁移到不同仓库</h3><p>当我们需要将分支origin(A)&#x2F;a 迁移到 origin(B)&#x2F;a 并保留分支记录</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">切换到当前<span class="hljs-string">origin</span>(<span class="hljs-string">A</span>) 更换当前仓库为目标仓库<br>$ <span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">gitlab</span>.<span class="hljs-string">southinfo</span>.<span class="hljs-string">net</span>/<span class="hljs-string">ecrp-sg-web</span>.<span class="hljs-string">git</span><br>推送当前分支到更换后的目标仓库(需要密码/<span class="hljs-string">ssh</span>认证)<br>$ <span class="hljs-string">git</span> <span class="hljs-string">push</span><br></code></pre></td></tr></table></figure><h3 id="代码回滚-reset-x2F-revert"><a href="#代码回滚-reset-x2F-revert" class="headerlink" title="代码回滚(reset&#x2F;revert)"></a>代码回滚(reset&#x2F;revert)</h3><ul><li>结论</li></ul><ol><li>git revert 后会多出一条commit，这里可进行回撤操作</li><li>git reset 直接把之前 commit 删掉，非 git reset –hard 的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 git push -f</li></ol><ul><li>应用场景</li></ul><ol><li>如果回退分支的代码以后还需要的话用git revert就再好不过了；</li><li>如果分支我就是提错了没用了还不想让别人发现我错的代码，那就git reset吧</li></ol><ul><li><p>git reset<br>develop将a分支合并后，想要不留痕迹的撤回合并。这个时候用git reset就是很好的选择了</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">develop <span class="hljs-comment">----1      3-----</span><br>             \   /<br>branch <span class="hljs-keyword">a</span>       <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure></li><li><p>操作步骤</p></li></ul><ol><li>切换分支到develop</li><li>git log 查看当前分支日志</li><li>我要将develop回退到合并之前的状态，那就是退到 commit 1这了，将commit号复制下来。退出编辑界面。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">3.1</span> a分支的代码我不需要了，以后应该也不需要了<br>  git <span class="hljs-keyword">reset</span> <span class="hljs-number">1</span>（粘贴过来的<span class="hljs-keyword">commit</span>号） <span class="hljs-comment">--hard</span><br><span class="hljs-number">3.2</span> a分支的代码我还需要<br>  git <span class="hljs-keyword">reset</span> <span class="hljs-number">1</span>（粘贴过来的<span class="hljs-keyword">commit</span>号）<br></code></pre></td></tr></table></figure></li><li>将回退后的代码推送到远端 git push origin develop<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">![rejected] develop -&gt; develop (non-fast-forward)<br><span class="hljs-keyword">error: </span>无法推送一些引用到 &#x27;git@github.cn:...&#x27;<br>提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。<br>。。。<br></code></pre></td></tr></table></figure>因为本地分支的代码落后于远端develop分支, 所以这一步需要强行推送 <em>–force</em></li><li>强推<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> develop --force<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>git revert<br>还是之前的需求，不想要合并a，只想要没合并a时的样子。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">develop <span class="hljs-comment">----1      3-----</span><br>             \   /<br>branch <span class="hljs-keyword">a</span>       <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure></li><li><p>操作步骤</p></li></ul><ol><li>切换分支到develop  git checkout develop</li><li>git log 查看当前分支日志</li><li>这次和git reset 不同的是我不能复制 commit 1这个commit号了，我需要复制的是commit 2的commit号。因为revert后面跟的是具体需要哪个已经合并了的分支，而并不是需要会退到哪的commit号。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> revert <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li>push到远端服务器<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> develop<br></code></pre></td></tr></table></figure></li></ol><h3 id="解决合并代码-Already-up-to-date-问题"><a href="#解决合并代码-Already-up-to-date-问题" class="headerlink" title="解决合并代码 (Already up-to-date) 问题"></a>解决合并代码 (Already up-to-date) 问题</h3><ul><li>有时我们合并代码会遇到冲突解决的问题, 这个时候如果想取消本次合并如果直接丢弃全部文件会照成远端代码还是保存了本次解决冲突的提交, 当我们重新再合并有冲突的代码就会显示Already up-to-date</li><li>接上个例子, 现在的需求是我之前已经把a分支revert了，但是我现在又需要a分支的代码了，我之前都写过一遍总不能再重新写一遍了。我首先想到的方法，把a分支再merge到develop不就好了。<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">merge</span> <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure>结果<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Already up-<span class="hljs-keyword">to</span>-<span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure>因为我们之前提交合并的a分支的代码还在，因此我们并不能在重新合并a分支。</li></ul><p>解决方法: 使用revert之前revert的commit号。在上面的例子中就是git revert 4。于是又新增了一个commit，把之前revert的代码又重新revert回来了, 再继续执行合并操作代码冲突又会提示出来了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用shell命令</title>
    <link href="/2022/05/02/shellCommand/"/>
    <url>/2022/05/02/shellCommand/</url>
    
    <content type="html"><![CDATA[<h1 id="常用shell命令"><a href="#常用shell命令" class="headerlink" title="常用shell命令"></a>常用shell命令</h1><h2 id="1、ls：查看文件"><a href="#1、ls：查看文件" class="headerlink" title="1、ls：查看文件"></a>1、ls：查看文件</h2><p>常用参数：</p><p>-l 显示详细的文件信息</p><p>-a 显示隐藏文件</p><h2 id="2、cd：切换工作目录"><a href="#2、cd：切换工作目录" class="headerlink" title="2、cd：切换工作目录"></a>2、cd：切换工作目录</h2><p>cd ~ 切换到当前用户的home目录</p><p>cd - 退回切换前的目录</p><p>cd .. 返回上一级目录</p><p>cd  不指定目录，切换到当前用户的home目录</p><h2 id="3、pwd：显示用户当前目录"><a href="#3、pwd：显示用户当前目录" class="headerlink" title="3、pwd：显示用户当前目录"></a>3、pwd：显示用户当前目录</h2><h2 id="4、mkdir：创建目录"><a href="#4、mkdir：创建目录" class="headerlink" title="4、mkdir：创建目录"></a>4、mkdir：创建目录</h2><p>常用参数：</p><p>-p 若指定路径的父目录不存在则一并创建</p><h2 id="5、cp：复制"><a href="#5、cp：复制" class="headerlink" title="5、cp：复制"></a>5、cp：复制</h2><p>常用参数：</p><p>-r 递归复制，复制的数据会使用新的时间戳等信息</p><p>-f 强制复制</p><p>-a 递归复制，保留原文件属性的前提下复制文件</p><h2 id="6、rm：删除"><a href="#6、rm：删除" class="headerlink" title="6、rm：删除"></a>6、rm：删除</h2><p>常用参数：</p><p>-r删除目录及其子目录下的所有内容</p><p>-f 强制删除</p><p>-i 删除文件前先询问确认</p><h2 id="7、mv：移动"><a href="#7、mv：移动" class="headerlink" title="7、mv：移动"></a>7、mv：移动</h2><p>mv 1.txt 2.txt  将1.txt重命名为2.txt</p><h2 id="8、du：显示目录所占用的磁盘空间"><a href="#8、du：显示目录所占用的磁盘空间" class="headerlink" title="8、du：显示目录所占用的磁盘空间"></a>8、du：显示目录所占用的磁盘空间</h2><p>常用参数：</p><p>-s 只显示当前目录的大小,单位kb</p><p>-h 以K M G为单位，提高可读性</p><p>–max-depth&#x3D;1 只查看当前目录下的子目录大小</p><h2 id="9、cat：查看文件内容"><a href="#9、cat：查看文件内容" class="headerlink" title="9、cat：查看文件内容"></a>9、cat：查看文件内容</h2><p>cat file1 file2 &gt; file3 将file1和file2的内容结合起来写到file3中，file3以前的内容被清空</p><p>cat file1 file2 &gt;&gt; file3 将file1和file2的内容结合起来追加到file3中</p><h2 id="10、echo：输出字符串"><a href="#10、echo：输出字符串" class="headerlink" title="10、echo：输出字符串"></a>10、echo：输出字符串</h2><p>常用参数：</p><p>-n 显示字符串时在最后自动换行</p><p>-e 支持转义字符</p><p>和cat一样可以用重定向符“&gt;”和“&gt;&gt;”将输出的内容写到文件</p><h2 id="11、more-less：分页查看文件"><a href="#11、more-less：分页查看文件" class="headerlink" title="11、more,less：分页查看文件"></a>11、more,less：分页查看文件</h2><p>常用动作命令：</p><p>回车键<br>向下移动一行</p><p>y  向上移动一行</p><p>空格键<br>向下滚动一屏</p><p>b  向上滚动一屏</p><p>d  向下滚动半屏</p><p>u  向上滚动半屏</p><p>q  退出</p><p>less还可以用方向键控制往上或往下滚动文件，more不行</p><h2 id="12、grep：搜索文本"><a href="#12、grep：搜索文本" class="headerlink" title="12、grep：搜索文本"></a>12、grep：搜索文本</h2><p>常用参数：</p><p>-i 忽略大小写</p><p>-n 显示行号</p><p>在shell脚本中使用时，搜索成功返回0，不成功返回1，搜索的文件不存在返回2</p><h2 id="13、find：搜索文件"><a href="#13、find：搜索文件" class="headerlink" title="13、find：搜索文件"></a>13、find：搜索文件</h2><p>常用参数：</p><p>-name 按照名字查找</p><p>-type 按照文件类型查找（f一般文件  d目录  l 链接文件）</p><p>-size 按照文件大小查找</p><h2 id="14、ln：创建链接"><a href="#14、ln：创建链接" class="headerlink" title="14、ln：创建链接"></a>14、ln：创建链接</h2><p>常用参数：</p><p>-s 创建软链接（创建链接的时候尽量用绝对路径）</p><p>ln -s  &#x2F;home&#x2F;nfs&#x2F;C6DAI  &#x2F;home&#x2F;yangqing&#x2F;C6DAI</p><h2 id="15、mount：挂载"><a href="#15、mount：挂载" class="headerlink" title="15、mount：挂载"></a>15、mount：挂载</h2><p>mount -t nfs -o nolock,tcp<br>192.168.150.21:&#x2F;home&#x2F;yangqing&#x2F;D53.5<br>&#x2F;usr&#x2F;local</p><p>mount 不加任何参数是查看当前挂载状态</p><p>umount<br>&#x2F;usr&#x2F;local 卸载</p><h2 id="16、chmod：权限设置"><a href="#16、chmod：权限设置" class="headerlink" title="16、chmod：权限设置"></a>16、chmod：权限设置</h2><p>常用参数：</p><p>-R 递归修改权限</p><p>u:所有者权限  g:所属组权限  o:其他用户权限   a:全部用户</p><p>r: 读权限，数字表示为4   w:写权限，数字表示为2   x:执行权限，数字表示为1</p><p>chmod 777 file  等同于 chmod a&#x3D;rwx file  所有用户有可读可写可执行权限</p><h2 id="17、kill：删除执行中的程序"><a href="#17、kill：删除执行中的程序" class="headerlink" title="17、kill：删除执行中的程序"></a>17、kill：删除执行中的程序</h2><p>kill -9 pid<br>彻底杀死程序</p><p>killall * 杀死当前目录所有程序</p><h2 id="18、sed：编辑文本"><a href="#18、sed：编辑文本" class="headerlink" title="18、sed：编辑文本"></a>18、sed：编辑文本</h2><p>常用参数：</p><p>-i 直接编辑源文件</p><p>-e 执行多个命令   sed ‘&#x2F;www&#x2F;d;&#x2F;fff&#x2F;d’</p><p>指令动作：</p><p>a 新增，当前行的后一行新增一行</p><p>i 插入，当前行的前一行插入新的一行</p><p>d 删除   sed ‘3,$d’ file  删除第3到最后一行</p><p>c 替换，以行为单位替换   sed ‘2,5c No 2-5 number’ file  第2-5行整体替换No 2-5<br>number</p><p>s 字符串替换  sed ‘s&#x2F;home&#x2F;root&#x2F;g’ file    将文件中所有home替换为root</p><h2 id="19、tar：压缩"><a href="#19、tar：压缩" class="headerlink" title="19、tar：压缩"></a>19、tar：压缩</h2><p>常用参数：</p><p>-c 建立压缩文件</p><p>-x 解压</p><p>-t 查看内容</p><p>-v 显示所有过程</p><p>-z 用gzip压缩解压</p><p>-j 用bzip2压缩解压</p><p>-f 使用文件名（必须有的参数且是最后一个参数）</p><p>解压：</p><p>*.tar<br> tar -xvf</p><p>*.tar.gz      tar -xzf</p><p>*tar.bz2<br>tar -xjf   </p><h2 id="20、vi：编辑器"><a href="#20、vi：编辑器" class="headerlink" title="20、vi：编辑器"></a>20、vi：编辑器</h2><p>一般模式：</p><p>i 切换到编辑模式</p><p>：切换到底线命令模式</p><p>Page Down&#x2F;Page Up 向上&#x2F;向下移动一页</p><p>Home&#x2F;End 移动到这行的最前面&#x2F;最后面</p><p>G 移动到这个文档的最后一行</p><p>gg 移动到这个文档的第一行</p><p>数字+Enter  光标向下移动n行</p><p>&#x2F;word 在文档内搜索word字符串</p><p>dd  删除光标所在那一整行</p><p>yy  复制光标所在的那一行</p><p>u 复原前一个动作</p><p>ctrl + r 重做一次上一个动作</p><h2 id="21、shell脚本内if判断条件"><a href="#21、shell脚本内if判断条件" class="headerlink" title="21、shell脚本内if判断条件"></a>21、shell脚本内if判断条件</h2><p>字符串比较：str1 &#x3D; str2   str1 !&#x3D; str2</p><p>数字比较： -eq 相等      -ne不相等    -gt 大于  </p><p>-ge大于等于   -lt 小于      -le小于等于</p><p>目录文件：-d 该目录存在  -f  该文件存在</p><p>逻辑判断：-a 与      -o 或      ！非</p><p>或者使用&amp;&amp; ||逻辑符，但是逻辑符写在中括号之间</p><h2 id="22、命令行快捷键"><a href="#22、命令行快捷键" class="headerlink" title="22、命令行快捷键"></a>22、命令行快捷键</h2><p>ctrl + u 删除光标前的所有字符</p><p>ctrl + k<br>删除光标后的所有字符</p><p>ctrl + a 移动光标到行首</p><p>ctrl + e 移动光标到行尾</p><p>ctrl + insert 复制</p><p>shift + insert 粘贴</p><h2 id="23-touch-命令"><a href="#23-touch-命令" class="headerlink" title="23. touch 命令"></a>23. touch 命令</h2><p>touch 命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。</p><p>touch test.txt 创建不存在的文件test.txt</p><h2 id="23-vi-命令"><a href="#23-vi-命令" class="headerlink" title="23. vi 命令"></a>23. vi 命令</h2><p>vi是工作在字符终端环境下的全屏幕编辑器</p><ul><li>命令模式<ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。</li></ul></li><li>输入模式<ul><li>字符按键以及Shift组合，输入字符</li><li>ENTER，回车键，换行</li><li>BACK SPACE，退格键，删除光标前一个字符</li><li>DEL，删除键，删除光标后一个字符</li><li>方向键，在文本中移动光标</li><li>HOME&#x2F;END，移动光标到行首&#x2F;行尾</li><li>Page Up&#x2F;Page Down，上&#x2F;下翻页</li><li>Insert，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li>ESC，退出输入模式，切换到命令模式</li></ul></li><li>末行模式<ul><li>q 退出程序</li><li>q! 不保存并退出</li><li>wq 保存文件并退出</li></ul></li></ul><h2 id="24-ssh-key"><a href="#24-ssh-key" class="headerlink" title="24. ssh-key"></a>24. ssh-key</h2><p>生成ssh密钥</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 基本语法</title>
    <link href="/2022/04/03/markdown/"/>
    <url>/2022/04/03/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="Markdown-常用语法记录-栗子展示"><a href="#Markdown-常用语法记录-栗子展示" class="headerlink" title="Markdown 常用语法记录 + 栗子展示"></a>Markdown 常用语法记录 + 栗子展示</h2><h3 id="🌰例子1"><a href="#🌰例子1" class="headerlink" title="🌰例子1 :"></a>🌰例子1 :</h3><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br></code></pre></td></tr></table></figure><h3 id="🌰例子2-字体"><a href="#🌰例子2-字体" class="headerlink" title="🌰例子2(字体) :"></a>🌰例子2(字体) :</h3><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>&#96;<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span>`<br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><h3 id="🌰例子3-引用"><a href="#🌰例子3-引用" class="headerlink" title="🌰例子3(引用) :"></a>🌰例子3(引用) :</h3><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><h3 id="🌰例子4-分割线"><a href="#🌰例子4-分割线" class="headerlink" title="🌰例子4(分割线) :"></a>🌰例子4(分割线) :</h3><hr><hr><hr><hr><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span><span class="hljs-strong">*****</span><br></code></pre></td></tr></table></figure><h3 id="🌰例子5-图片"><a href="#🌰例子5-图片" class="headerlink" title="🌰例子5(图片) :"></a>🌰例子5(图片) :</h3><p>![图片alt](图片地址 ‘’图片title’’)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br><img src="http://ra2xog64f.bkt.clouddn.com/blog/647DC87B-FDA7-4079-BADE-299589ECD64F.jpeg" alt="blockchain" title="萌妹子"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![blockchain](http:<span class="hljs-regexp">//</span>ra2xog64f.bkt.clouddn.com<span class="hljs-regexp">/blog/</span><span class="hljs-number">647</span>DC87B-FDA7-<span class="hljs-number">4079</span>-BADE-<span class="hljs-number">299589</span>ECD64F.jpeg <span class="hljs-string">&quot;萌妹子&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="🌰例子6-超链接"><a href="#🌰例子6-超链接" class="headerlink" title="🌰例子6(超链接) :"></a>🌰例子6(超链接) :</h3><p><a href="https://cosimac.github.io/" title="我的blog">我的blog</a><br><a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接名</a><br>title可加可不加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[我的blog](https:<span class="hljs-regexp">//</span>cosimac.github.io/ <span class="hljs-string">&quot;我的blog&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="🌰例子7-无序列表"><a href="#🌰例子7-无序列表" class="headerlink" title="🌰例子7(无序列表) :"></a>🌰例子7(无序列表) :</h3><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br></code></pre></td></tr></table></figure><h3 id="🌰例子8-有序列表"><a href="#🌰例子8-有序列表" class="headerlink" title="🌰例子8(有序列表) :"></a>🌰例子8(有序列表) :</h3><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>注意：序号跟内容之间要有空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<br><span class="hljs-bullet">2.</span> 列表内容<br><span class="hljs-bullet">3.</span> 列表内容<br></code></pre></td></tr></table></figure><p>列表的嵌套</p><ul><li>1<ul><li>11</li><li>22</li></ul></li></ul><h3 id="🌰例子9-表格"><a href="#🌰例子9-表格" class="headerlink" title="🌰例子9(表格) :"></a>🌰例子9(表格) :</h3><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><p>第二行分割表头和内容。<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 姓名 </span>|<span class="hljs-string"> 技能  </span>|<span class="hljs-string"> 排行 </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> :---: </span>|<span class="hljs-string"> ---: </span>|<br>|<span class="hljs-string"> 刘备 </span>|<span class="hljs-string">  哭   </span>|<span class="hljs-string"> 大哥 </span>|<br>|<span class="hljs-string"> 关羽 </span>|<span class="hljs-string">  打   </span>|<span class="hljs-string"> 二哥 </span>|<br>|<span class="hljs-string"> 张飞 </span>|<span class="hljs-string">  骂   </span>|<span class="hljs-string"> 三弟 </span>|<br></code></pre></td></tr></table></figure><h3 id="🌰例子10-代码行"><a href="#🌰例子10-代码行" class="headerlink" title="🌰例子10(代码行) :"></a>🌰例子10(代码行) :</h3><p>语法：<br>单行代码：代码之间分别用一个反引号包起来<br>  <code>代码内容</code><br>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">代码...<br>代码...<br>代码...<br></code></pre></td></tr></table></figure><h3 id="🌰例子11-流程图"><a href="#🌰例子11-流程图" class="headerlink" title="🌰例子11(流程图) :"></a>🌰例子11(流程图) :</h3><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
